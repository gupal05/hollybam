<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hollybam.hollybam.dao.IF_ProductDao">

    <!-- 0 -->
    <select id="isProductCode" parameterType="String" resultType="int">
        select count(*)
        from product
        where product_id = #{code}
    </select>

    <!-- 1. Product 테이블에 삽입 -->
    <insert id="insertProduct" parameterType="com.hollybam.hollybam.dto.CategoryDto">
        <foreach collection="categoryDetailDto" item="detail">
            <foreach collection="detail.productList" item="product">
                INSERT INTO product (
                cate_code,
                cd_code,
                product_active,
                product_quantity,
                product_description,
                product_name,
                product_id
                ) VALUES (
                #{categoryCode},         <!-- from CategoryDto -->
                #{detail.cateDetailCode},<!-- from CategoryDetailDto -->
                #{product.productActive},<!-- from ProductDto -->
                #{product.productQuantity},
                #{product.productDescription},
                #{product.productName},
                #{product.productId}
                );
            </foreach>
        </foreach>
    </insert>

    <!-- 1.5 ProductCode select -->
    <select id="getProductCode" parameterType="com.hollybam.hollybam.dto.ProductDto" resultType="int">
        select product.product_code from product where product_id = #{productId}
    </select>

    <!-- 2. Price 테이블에 삽입 -->
    <insert id="insertPrice" parameterType="com.hollybam.hollybam.dto.ProductDto">
        <foreach collection="priceDtoList" item="price">
            INSERT INTO price (product_code, price_original, price_cost, price_selling, price_margin)
            VALUES (#{productCode}, #{price.priceOriginal}, #{price.priceCost}, #{price.priceSelling}, #{price.priceMargin})
        </foreach>
    </insert>

    <!-- 3. Image 테이블에 삽입 -->
    <insert id="insertImage" parameterType="com.hollybam.hollybam.dto.ProductDto">
            INSERT INTO image (product_code, image_url, image_type, image_order) VALUES
        <foreach collection="imageDtoList" item="img" separator=",">
            (#{productCode}, #{img.imageUrl}, #{img.imageType}, #{img.imageOrder})
        </foreach>
    </insert>

    <!-- 4. 상품 옵션 저장 -->
    <insert id="insertProductOptions" parameterType="com.hollybam.hollybam.dto.ProductDto">
        INSERT INTO product_option (
        product_code,
        option_name,
        option_value,
        option_price,
        option_quantity
        ) VALUES
        <foreach collection="productOptionDtoList" item="option" separator=",">
            (
            #{productCode},
            #{option.optionName},
            #{option.optionValue},
            #{option.optionPrice},
            #{option.optionQuantity}
            )
        </foreach>
    </insert>

    <!-- ProductDto 전체 구조 -->
    <resultMap id="ProductResultMap" type="com.hollybam.hollybam.dto.ProductDto">
        <id property="productCode" column="product_code" />
        <result property="productId" column="product_id"/>
        <result property="productName" column="product_name" />
        <result property="productQuantity" column="product_quantity" />
        <result property="productDescription" column="product_description" />
        <result property="productOrderCount" column="product_order_count" />
        <result property="reviewAvg" column="avg_rating" />
        <result property="reviewCount" column="review_count" />

        <!-- priceDtoList는 단일 항목이므로 하나만 매핑 -->
        <collection property="priceDtoList" ofType="com.hollybam.hollybam.dto.PriceDto">
            <result property="priceOriginal" column="price_original" />
            <result property="priceSelling" column="price_selling" />
        </collection>

        <!-- imageDtoList도 단일 항목만 매핑 -->
        <collection property="imageDtoList" ofType="com.hollybam.hollybam.dto.ImageDto">
            <result property="imageUrl" column="title_image_url" />
            <result property="imageWebp" column="webp_image_url"/>
        </collection>
    </resultMap>

    <!-- 베스트 상품 리스트 -->
    <select id="selectBestProducts" resultMap="ProductResultMap">
        SELECT
            p.product_code,
            p.product_id,
            p.product_name,
            p.product_quantity,
            p.product_description,
            p.product_order_count,
            pr.price_original,
            pr.price_selling,
            title_img.image_url AS title_image_url,
            webp_img.image_url AS webp_image_url,
            IFNULL(r.review_count, 0) AS review_count,
            IFNULL(r.avg_rating, 0) AS avg_rating
        FROM
            product p
                JOIN price pr ON p.product_code = pr.product_code
                LEFT JOIN image title_img ON p.product_code = title_img.product_code AND title_img.image_type = 'title'
                LEFT JOIN image webp_img ON p.product_code = webp_img.product_code AND webp_img.image_type = 'webp'

                -- 리뷰 개수 및 평균 평점 서브쿼리 조인
                LEFT JOIN (
                SELECT
                    oi.product_code,
                    COUNT(rv.review_code) AS review_count,
                    ROUND(AVG(rv.rating), 1) AS avg_rating
                FROM
                    review rv
                        JOIN order_items oi ON rv.order_item_code = oi.order_item_code
                WHERE
                    rv.is_active = 1
                GROUP BY
                    oi.product_code
            ) r ON p.product_code = r.product_code

        WHERE
            p.product_active = 1
        ORDER BY
            p.product_order_count DESC
        LIMIT 8
    </select>


    <!-- 베스트 상품 리스트 -->
    <select id="selectBestProductsForMobile" resultMap="ProductResultMap">
        SELECT
            p.product_code,
            p.product_id,
            p.product_name,
            p.product_quantity,
            p.product_description,
            p.product_order_count,
            pr.price_original,
            pr.price_selling,
            title_img.image_url AS title_image_url,
            webp_img.image_url AS webp_image_url,
            IFNULL(r.review_count, 0) AS review_count,
            IFNULL(r.avg_rating, 0) AS avg_rating
        FROM
            product p
                JOIN price pr ON p.product_code = pr.product_code
                LEFT JOIN image title_img ON p.product_code = title_img.product_code AND title_img.image_type = 'title'
                LEFT JOIN image webp_img ON p.product_code = webp_img.product_code AND webp_img.image_type = 'webp'

                -- 리뷰 개수 및 평균 평점 서브쿼리 조인
                LEFT JOIN (
                SELECT
                    oi.product_code,
                    COUNT(rv.review_code) AS review_count,
                    ROUND(AVG(rv.rating), 1) AS avg_rating
                FROM
                    review rv
                        JOIN order_items oi ON rv.order_item_code = oi.order_item_code
                WHERE
                    rv.is_active = 1
                GROUP BY
                    oi.product_code
            ) r ON p.product_code = r.product_code

        WHERE
            p.product_active = 1
        ORDER BY
            p.product_order_count DESC
        LIMIT 4
    </select>


    <!-- 신제품 리스트 -->
    <select id="selectNewProducts" resultMap="ProductResultMap">
        SELECT
            p.product_code,
            p.product_id,
            p.product_name,
            p.product_quantity,
            p.product_description,
            p.product_order_count,
            pr.price_original,
            pr.price_selling,
            title_img.image_url AS title_image_url,
            webp_img.image_url AS webp_image_url,
            IFNULL(r.review_count, 0) AS review_count,
            IFNULL(r.avg_rating, 0) AS avg_rating
        FROM
            product p
                JOIN price pr ON p.product_code = pr.product_code
                LEFT JOIN image title_img ON p.product_code = title_img.product_code AND title_img.image_type = 'title'
                LEFT JOIN image webp_img ON p.product_code = webp_img.product_code AND webp_img.image_type = 'webp'

                -- 리뷰 개수 및 평균 평점 서브쿼리 조인
                LEFT JOIN (
                SELECT
                    oi.product_code,
                    COUNT(rv.review_code) AS review_count,
                    ROUND(AVG(rv.rating), 1) AS avg_rating
                FROM
                    review rv
                        JOIN order_items oi ON rv.order_item_code = oi.order_item_code
                WHERE
                    rv.is_active = 1
                GROUP BY
                    oi.product_code
            ) r ON p.product_code = r.product_code

        WHERE
            p.product_active = 1
        ORDER BY
            p.create_at DESC
        LIMIT 4
    </select>


    <!-- 상품 상세페이지 기본 정보 조회 -->
    <select id="getProductDetailInfo_first" resultMap="ProductResultMap" parameterType="String">
        SELECT
            p.product_code,
            p.product_id,
            p.product_name,
            p.product_quantity,
            p.product_description,
            pr.price_original,
            pr.price_selling,
            title_img.image_url AS title_image_url
        FROM
            product p
                JOIN price pr ON p.product_code = pr.product_code
                LEFT JOIN image title_img ON p.product_code = title_img.product_code AND title_img.image_type = 'title'
        WHERE p.product_id=#{productId}
    </select>

    <!-- 상품 상세페이지 썸네일 조회 -->
    <select id="getProductInfoThumbnail" resultType="com.hollybam.hollybam.dto.ImageDto" parameterType="com.hollybam.hollybam.dto.ProductDto">
        SELECT *
        FROM image
        WHERE product_code = #{productCode}
          AND image_type = 'thumbnail'
        ORDER BY image_order ASC
    </select>

    <!-- 상품 상세페이지 content 조회 -->
    <select id="getProductInfoContent" resultType="com.hollybam.hollybam.dto.ImageDto" parameterType="com.hollybam.hollybam.dto.ProductDto">
        SELECT *
        FROM image
        WHERE product_code = #{productCode}
          AND image_type = 'content'
        ORDER BY image_order ASC
    </select>

    <select id="getProductOptions" parameterType="int" resultType="com.hollybam.hollybam.dto.ProductOptionDto">
        SELECT
            option_code,
            option_name,
            option_value,
            option_price,
            option_quantity
        FROM product_option
        WHERE product_code = #{productCode}
        ORDER BY option_name, option_code
    </select>


    <!-- Product ResultMap -->
    <resultMap id="productMap" type="com.hollybam.hollybam.dto.ProductDto">
        <id property="productCode" column="product_code"/>
        <result property="productId" column="product_id"/>
        <result property="productName" column="product_name"/>
        <result property="productDescription" column="product_description"/>
        <result property="productOrderCount" column="product_order_count"/>
        <result property="productQuantity" column="product_quantity"/>
        <result property="productActive" column="product_active"/>
        <result property="createAt" column="create_at"/>
        <result property="updateAt" column="update_at"/>

        <collection property="priceDtoList" ofType="com.hollybam.hollybam.dto.PriceDto">
            <id property="priceCode" column="price_code"/>
            <result property="priceOriginal" column="price_original"/>
            <result property="priceCost" column="price_cost"/>
            <result property="priceSelling" column="price_selling"/>
            <result property="priceMargin" column="price_margin"/>
            <result property="createAt" column="price_create_at"/>
            <result property="updateAt" column="price_update_at"/>
        </collection>

        <collection property="imageDtoList" ofType="com.hollybam.hollybam.dto.ImageDto">
            <id property="imageCode" column="image_code"/>
            <result property="imageUrl" column="image_url"/>
            <result property="imageType" column="image_type"/>
            <result property="imageOrder" column="image_order"/>
            <result property="imageWebp" column="image_webp"/>
            <result property="createAt" column="image_create_at"/>
            <result property="updateAt" column="image_update_at"/>
        </collection>
    </resultMap>

    <!-- 카테고리 코드로 상품 조회 -->
    <!-- ProductMapper.xml에 추가 -->
    <select id="selectProductsByCategoryCode" resultMap="productMap">
        SELECT
        p.product_code,
        p.product_id,
        p.product_name,
        p.product_description,
        p.product_order_count,
        p.product_quantity,
        p.product_active,
        p.create_at,
        p.update_at,
        pr.price_code,
        pr.price_original,
        pr.price_cost,
        pr.price_selling,
        pr.price_margin,
        pr.create_at as price_create_at,
        pr.update_at as price_update_at,
        i.image_code,
        i.image_url,
        i.image_type,
        i.image_order,
        i.create_at as image_create_at,
        i.update_at as image_update_at,
        CASE
        WHEN i.image_type = 'webp' THEN i.image_url
        ELSE NULL
        END as image_webp
        FROM product p
        LEFT JOIN price pr ON p.product_code = pr.product_code
        LEFT JOIN image i ON p.product_code = i.product_code
        WHERE p.cate_code = #{categoryCode}
        AND p.product_active = 1
        AND (i.image_type = 'title' OR i.image_type = 'webp' OR i.image_code IS NULL)
        ORDER BY
        <choose>
            <when test="sort == 'latest'">p.create_at DESC</when>
            <when test="sort == 'popular'">p.product_order_count DESC, p.create_at DESC</when>
            <when test="sort == 'highprice'">pr.price_selling DESC</when>
            <when test="sort == 'lowprice'">pr.price_selling ASC</when>
            <otherwise>p.product_order_count DESC, p.create_at DESC</otherwise>
        </choose>
    </select>

    <!-- 카테고리 코드와 상세 카테고리 코드로 상품 조회 -->
    <select id="selectProductsByCategoryAndDetail" resultMap="productMap">
        SELECT
            p.product_code,
            p.product_id,
            p.product_name,
            p.product_description,
            p.product_order_count,
            p.product_quantity,
            p.product_active,
            p.create_at,
            p.update_at,
            pr.price_code,
            pr.price_original,
            pr.price_cost,
            pr.price_selling,
            pr.price_margin,
            pr.create_at as price_create_at,
            pr.update_at as price_update_at,
            i.image_code,
            i.image_url,
            i.image_type,
            i.image_order,
            i.create_at as image_create_at,
            i.update_at as image_update_at,
            CASE
                WHEN i.image_type = 'webp' THEN i.image_url
                ELSE NULL
                END as image_webp
        FROM product p
                 LEFT JOIN price pr ON p.product_code = pr.product_code
                 LEFT JOIN image i ON p.product_code = i.product_code
        WHERE p.cate_code = #{categoryCode}
          AND p.cd_code = #{detailCode}
          AND p.product_active = 1
          AND (i.image_type = 'title' OR i.image_type = 'webp' OR i.image_code IS NULL)
        ORDER BY p.product_order_count DESC, p.create_at DESC
    </select>
    <!-- 상품 코드로 상품 정보 조회 -->
    <select id="selectProductByCode" parameterType="int" resultType="com.hollybam.hollybam.dto.ProductDto">
        SELECT
            product_code as productCode,
            product_id as productId,
            product_name as productName,
            product_description as productDescription,
            product_quantity as productQuantity,
            product_active as productActive,
            cate_code as cateCode,
            cd_code as cdCode
        FROM product
        WHERE product_code = #{productCode}
          AND product_active = 1
    </select>

    <!-- 상품 가격 정보 조회 -->
    <select id="selectProductPrice" parameterType="int" resultType="com.hollybam.hollybam.dto.PriceDto">
        SELECT
            price_code as priceCode,
            product_code as productCode,
            price_original as priceOriginal,
            price_cost as priceCost,
            price_selling as priceSelling,
            price_margin as priceMargin
        FROM price
        WHERE product_code = #{productCode}
    </select>

    <!-- 옵션 코드로 특정 옵션 정보 조회 -->
    <select id="selectProductOption" parameterType="int" resultType="com.hollybam.hollybam.dto.ProductOptionDto">
        SELECT
            option_code as optionCode,
            product_code as productCode,
            option_name as optionName,
            option_value as optionValue,
            option_price as optionPrice,
            option_quantity as optionQuantity
        FROM product_option
        WHERE option_code = #{optionCode}
    </select>

    <!-- 상품 대표 이미지 조회 -->
    <select id="selectProductTitleImage" parameterType="int" resultType="com.hollybam.hollybam.dto.ImageDto">
        SELECT
            image_code as imageCode,
            product_code as productCode,
            image_url as imageUrl,
            image_type as imageType,
            image_order as imageOrder
        FROM image
        WHERE product_code = #{productCode}
          AND image_type = 'title'
        ORDER BY image_order ASC
        LIMIT 1
    </select>

    <!-- 메인페이지 위시리스트 갯수 -->
    <select id="getWishCount" parameterType="int" resultType="int">
        select count(*)
        from wishlist
        where product_code = #{productCode}
    </select>

    <select id="getProductReviewAvg"
            parameterType="int"
            resultType="java.lang.Double">
        SELECT
            IFNULL( ROUND(AVG(r.rating), 1), 0.0 )
        FROM review r
                 JOIN order_items oi
                      ON r.order_item_code = oi.order_item_code
        WHERE oi.product_code = #{productCode}
          AND r.is_active = 1
    </select>

    <select id="getProductReviewCount"
            parameterType="int"
            resultType="java.lang.Integer">
        SELECT
            COUNT(*)
        FROM review r
                 JOIN order_items oi
                      ON r.order_item_code = oi.order_item_code
        WHERE oi.product_code = #{productCode}
          AND r.is_active = 1
    </select>

    <select id="selectProductsByCategoryCodeWithPaging" resultMap="productMap">
        SELECT
        p.product_code,
        p.product_id,
        p.product_name,
        p.product_description,
        p.product_order_count,
        p.product_quantity,
        p.product_active,
        p.create_at,
        p.update_at,
        pr.price_code,
        pr.price_original,
        pr.price_cost,
        pr.price_selling,
        pr.price_margin,
        pr.create_at as price_create_at,
        pr.update_at as price_update_at,
        i.image_code,
        i.image_url,
        i.image_type,
        i.image_order,
        i.create_at as image_create_at,
        i.update_at as image_update_at,
        CASE
        WHEN i.image_type = 'webp' THEN i.image_url
        ELSE NULL
        END as image_webp
        FROM product p
        LEFT JOIN price pr ON p.product_code = pr.product_code
        LEFT JOIN image i ON p.product_code = i.product_code
        WHERE p.cate_code = #{categoryCode}
        AND p.product_active = 1
        AND (i.image_type = 'title' OR i.image_type = 'webp' OR i.image_code IS NULL)
        ORDER BY
        <choose>
            <when test="sort == 'latest'">p.create_at DESC</when>
            <when test="sort == 'popular'">p.product_order_count DESC, p.create_at DESC</when>
            <when test="sort == 'highprice'">pr.price_selling DESC</when>
            <when test="sort == 'lowprice'">pr.price_selling ASC</when>
            <otherwise>p.product_order_count DESC, p.create_at DESC</otherwise>
        </choose>
        LIMIT #{size} OFFSET #{offset}
    </select>

    <select id="selectProductsByCategoryAndDetailWithPaging" resultMap="productMap">
        SELECT
        p.product_code,
        p.product_id,
        p.product_name,
        p.product_description,
        p.product_order_count,
        p.product_quantity,
        p.product_active,
        p.create_at,
        p.update_at,
        pr.price_code,
        pr.price_original,
        pr.price_cost,
        pr.price_selling,
        pr.price_margin,
        pr.create_at as price_create_at,
        pr.update_at as price_update_at,
        i.image_code,
        i.image_url,
        i.image_type,
        i.image_order,
        i.create_at as image_create_at,
        i.update_at as image_update_at,
        CASE
        WHEN i.image_type = 'webp' THEN i.image_url
        ELSE NULL
        END as image_webp
        FROM product p
        LEFT JOIN price pr ON p.product_code = pr.product_code
        LEFT JOIN image i ON p.product_code = i.product_code
        WHERE p.cate_code = #{categoryCode}
        AND p.cd_code = #{detailCode}
        AND p.product_active = 1
        AND (i.image_type = 'title' OR i.image_type = 'webp' OR i.image_code IS NULL)
        ORDER BY
        <choose>
            <when test="sort == 'latest'">p.create_at DESC</when>
            <when test="sort == 'popular'">p.product_order_count DESC, p.create_at DESC</when>
            <when test="sort == 'highprice'">pr.price_selling DESC</when>
            <when test="sort == 'lowprice'">pr.price_selling ASC</when>
            <otherwise>p.product_order_count DESC, p.create_at DESC</otherwise>
        </choose>
        LIMIT #{size} OFFSET #{offset}
    </select>

    <!-- 카테고리별 상품 개수 조회 -->
    <select id="selectProductCountByCategory" resultType="int">
        SELECT COUNT(*)
        FROM product p
        WHERE p.cate_code = #{categoryCode}
          AND p.product_active = 1
    </select>

    <!-- 카테고리 + 상세카테고리별 상품 개수 조회 -->
    <select id="selectProductCountByCategoryAndDetail" resultType="int">
        SELECT COUNT(*)
        FROM product p
        WHERE p.cate_code = #{categoryCode}
          AND p.cd_code = #{detailCode}
          AND p.product_active = 1
    </select>
</mapper>
