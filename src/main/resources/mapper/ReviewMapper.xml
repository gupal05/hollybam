<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hollybam.hollybam.dao.IF_ReviewDao">

    <!-- ====== 기존 쿼리들 (그대로 유지) ====== -->

    <!-- 주문 상태 조회 -->
    <select id="getOrderStatusByOrderItemCode" resultType="String">
        SELECT o.simple_status
        FROM orders o
                 JOIN order_items oi ON o.order_code = oi.order_code
        WHERE oi.order_item_code = #{orderItemCode}
    </select>

    <!-- 이미 리뷰가 작성되었는지 확인 -->
    <select id="countExistingReview" resultType="int">
        SELECT COUNT(*)
        FROM review
        WHERE order_item_code = #{orderItemCode}
          AND (
            (#{memCode} IS NOT NULL AND mem_code = #{memCode})
                OR
            (#{guestCode} IS NOT NULL AND guest_code = #{guestCode})
            )
    </select>

    <insert id="insertReview" parameterType="ReviewDto" useGeneratedKeys="true" keyProperty="reviewCode">
        INSERT INTO review (
            order_item_code,
            mem_code,
            guest_code,
            rating,
            content,
            is_active,
            created_at
        )
        VALUES (
                   #{orderItemCode},
                   #{memCode},
                   #{guestCode},
                   #{rating},
                   #{content},
                   1,
                   NOW()
               )
    </insert>

    <insert id="insertReviewImage" parameterType="ReviewImageDto">
        INSERT INTO review_image (review_code, image_url, image_order)
        VALUES (#{reviewCode}, #{imageUrl}, #{imageOrder})
    </insert>

    <insert id="insertTextReviewEventPoint" parameterType="com.hollybam.hollybam.dto.ReviewDto">
        insert into point(mem_code, point_change, point_type, description, related_order_code)
        values (#{memCode}, 500, 'SAVE', '텍스트 리뷰 작성(500원)', null)
    </insert>

    <insert id="insertPhotoReviewEventPoint" parameterType="com.hollybam.hollybam.dto.ReviewDto">
        insert into point(mem_code, point_change, point_type, description, related_order_code)
        values (#{memCode}, 1000, 'SAVE', '포토 리뷰 작성(1000원)', null)
    </insert>

    <select id="isWroteReview" parameterType="int" resultType="int">
        select count(*)
        from review
        where order_item_code = #{orderItemCode}
    </select>

    <!-- 베스트 리뷰 조회용 ResultMap -->
    <resultMap id="BestReviewResultMap" type="com.hollybam.hollybam.dto.BestReviewDto">
        <!-- 리뷰 기본 정보 -->
        <id property="reviewCode" column="review_code"/>
        <result property="memCode" column="mem_code"/>
        <result property="guestCode" column="guest_code"/>
        <result property="orderItemCode" column="order_item_code"/>
        <result property="rating" column="rating"/>
        <result property="content" column="content"/>
        <result property="likeCount" column="like_count"/>
        <result property="createdAt" column="created_at"/>

        <!-- 작성자 정보 (플랫 구조) -->
        <result property="writerName" column="writer_name"/>
        <result property="writerBirth" column="writer_birth"/>
        <result property="writerType" column="writer_type"/>

        <!-- ⭐ 새로 추가: 사용자별 좋아요 상태 -->
        <result property="isLiked" column="is_liked"/>

        <!-- 주문 아이템 정보 -->
        <association property="orderItemDto" javaType="com.hollybam.hollybam.dto.OrderItemDto">
            <id property="orderItemCode" column="order_item_code"/>
            <result property="orderCode" column="order_code"/>
            <result property="productCode" column="product_code"/>
            <result property="createAt" column="order_create_at"/>
        </association>

        <!-- 상품 정보 -->
        <association property="productDto" javaType="com.hollybam.hollybam.dto.ProductDto">
            <id property="productCode" column="product_code"/>
            <result property="productId" column="product_id"/>
            <result property="productName" column="product_name"/>
        </association>

        <!-- 상품 대표 이미지 -->
        <association property="imageDto" javaType="com.hollybam.hollybam.dto.ImageDto">
            <id property="imageCode" column="image_code"/>
            <result property="imageUrl" column="image_url"/>
            <result property="imageType" column="image_type"/>
        </association>

        <!-- 회원 정보 (nullable) -->
        <association property="memberDto" javaType="com.hollybam.hollybam.dto.MemberDto">
            <id property="memberCode" column="mem_code"/>
            <result property="memberName" column="mem_name"/>
            <result property="memberBirth" column="mem_birth"/>
            <result property="memberGender" column="mem_gender"/>
        </association>

        <!-- 비회원 정보 (nullable) -->
        <association property="guestDto" javaType="com.hollybam.hollybam.dto.GuestDto">
            <id property="guestCode" column="guest_code"/>
            <result property="guestName" column="guest_name"/>
            <result property="guestBirth" column="guest_birth"/>
            <result property="guestGender" column="guest_gender"/>
        </association>
    </resultMap>

    <!-- 베스트 리뷰 조회 쿼리 -->
    <select id="selectBestReviews" resultMap="BestReviewResultMap">
        SELECT
        r.review_code,
        r.mem_code,
        r.guest_code,
        r.order_item_code,
        r.rating,
        r.content,
        r.created_at,
        COALESCE(rl.like_count, 0) as like_count,

        oi.order_item_code,
        oi.order_code,
        oi.product_code,
        oi.create_at as order_create_at,

        p.product_code,
        p.product_id,
        p.product_name,

        img.image_code,
        img.image_url,
        'title' as image_type,

        m.mem_name,
        m.mem_birth,
        m.mem_gender,

        g.guest_name,
        g.guest_birth,
        g.guest_gender,

        <!-- 작성자 정보 통합 -->
        CASE
        WHEN r.mem_code IS NOT NULL THEN m.mem_name
        WHEN r.guest_code IS NOT NULL THEN g.guest_name
        ELSE NULL
        END as writer_name,

        CASE
        WHEN r.mem_code IS NOT NULL THEN m.mem_birth
        WHEN r.guest_code IS NOT NULL THEN g.guest_birth
        ELSE NULL
        END as writer_birth,

        CASE
        WHEN r.mem_code IS NOT NULL THEN 'member'
        WHEN r.guest_code IS NOT NULL THEN 'guest'
        ELSE 'unknown'
        END as writer_type

        FROM review r
        -- 리뷰별 좋아요 수 계산
        LEFT JOIN (
        SELECT
        review_code,
        COUNT(*) as like_count
        FROM review_like
        GROUP BY review_code
        ) rl ON r.review_code = rl.review_code
        -- 주문 아이템 정보
        INNER JOIN order_items oi ON r.order_item_code = oi.order_item_code
        -- 상품 정보
        INNER JOIN product p ON oi.product_code = p.product_code
        -- 상품 대표 이미지 (title 타입)
        LEFT JOIN image img ON p.product_code = img.product_code
        AND img.image_type = 'title'
        -- 회원 정보 (있는 경우)
        LEFT JOIN member m ON r.mem_code = m.mem_code
        -- 비회원 정보 (있는 경우)
        LEFT JOIN guest g ON r.guest_code = g.guest_code
        -- 리뷰가 활성화된 것만
        WHERE r.is_active = 1
        -- 좋아요 수 내림차순, 그 다음 리뷰 작성일 내림차순
        ORDER BY COALESCE(rl.like_count, 0) DESC, r.created_at DESC
        -- 베스트 리뷰 12개
        LIMIT 12
    </select>

    <!-- 특정 상품의 베스트 리뷰 조회 -->
    <select id="selectBestReviewsByProduct" parameterType="int" resultMap="BestReviewResultMap">
        SELECT
            r.review_code,
            r.mem_code,
            r.guest_code,
            r.order_item_code,
            r.rating,
            r.content,
            r.created_at,
            COALESCE(rl.like_count, 0) as like_count,

            oi.order_item_code,
            oi.order_code,
            oi.product_code,
            oi.create_at as order_create_at,

            p.product_code,
            p.product_id,
            p.product_name,

            img.image_code,
            img.image_url,
            'title' as image_type,

            m.mem_name,
            m.mem_birth,

            g.guest_name,
            g.guest_birth,

            CASE
                WHEN r.mem_code IS NOT NULL THEN m.mem_name
                WHEN r.guest_code IS NOT NULL THEN g.guest_name
                ELSE NULL
                END as writer_name,

            CASE
                WHEN r.mem_code IS NOT NULL THEN m.mem_birth
                WHEN r.guest_code IS NOT NULL THEN g.guest_birth
                ELSE NULL
                END as writer_birth,

            CASE
                WHEN r.mem_code IS NOT NULL THEN 'member'
                WHEN r.guest_code IS NOT NULL THEN 'guest'
                ELSE 'unknown'
                END as writer_type

        FROM review r
                 LEFT JOIN (
            SELECT
                review_code,
                COUNT(*) as like_count
            FROM review_like
            GROUP BY review_code
        ) rl ON r.review_code = rl.review_code
                 INNER JOIN order_items oi ON r.order_item_code = oi.order_item_code
                 INNER JOIN product p ON oi.product_code = p.product_code
                 LEFT JOIN image img ON p.product_code = img.product_code
            AND img.image_type = 'title'
                 LEFT JOIN member m ON r.mem_code = m.mem_code
                 LEFT JOIN guest g ON r.guest_code = g.guest_code
        WHERE r.is_active = 1
          AND p.product_code = #{productCode}
        ORDER BY COALESCE(rl.like_count, 0) DESC, r.created_at DESC
        LIMIT 12
    </select>

    <!-- 회원의 리뷰 통계 조회 -->
    <select id="selectMemberReviewStats" parameterType="int" resultType="map">
        SELECT
            COUNT(*) as totalReviews,
            COUNT(ri.review_code) as photoReviews,
            COUNT(*) - COUNT(ri.review_code) as textReviews,
            ROUND(SUM(r.rating) / COUNT(*), 2) AS avgRating
        FROM review r
                 LEFT JOIN review_image ri ON r.review_code = ri.review_code
        WHERE r.mem_code = #{memberCode}
          AND r.is_active = 1
    </select>

    <!-- 비회원의 리뷰 통계 조회 -->
    <select id="selectGuestReviewStats" parameterType="int" resultType="map">
        SELECT
            COUNT(*) as totalReviews,
            COUNT(ri.review_code) as photoReviews,
            COUNT(*) - COUNT(ri.review_code) as textReviews,
            ROUND(SUM(r.rating) / COUNT(*), 2) AS avgRating
        FROM review r
                 LEFT JOIN review_image ri ON r.review_code = ri.review_code
        WHERE r.guest_code = #{guestCode}
          AND r.is_active = 1
    </select>

    <!-- ====== 기존 포토리뷰 쿼리들 (하위 호환성 유지) ====== -->

    <!-- 포토리뷰 최신순 조회 (기존 메서드) -->
    <select id="getPhotoReviewDesc" resultType="map">
        SELECT DISTINCT
            r.review_code,
            r.mem_code as memberCode,
            r.guest_code as guestCode,
            r.rating,
            r.content,
            r.created_at as reviewDate,
            p.product_name as productName,
            img.image_url as productImage,
            ri.image_url as reviewImage,
            COALESCE(rl.like_count, 0) as likeCount,
            CASE
                WHEN r.mem_code IS NOT NULL THEN m.mem_name
                WHEN r.guest_code IS NOT NULL THEN g.guest_name
                ELSE 'Unknown'
                END as writerName
        FROM review r
                 INNER JOIN review_image ri ON r.review_code = ri.review_code
                 INNER JOIN order_items oi ON r.order_item_code = oi.order_item_code
                 INNER JOIN product p ON oi.product_code = p.product_code
                 LEFT JOIN image img ON p.product_code = img.product_code AND img.image_type = 'title'
                 LEFT JOIN member m ON r.mem_code = m.mem_code
                 LEFT JOIN guest g ON r.guest_code = g.guest_code
                 LEFT JOIN (
            SELECT review_code, COUNT(*) as like_count
            FROM review_like
            GROUP BY review_code
        ) rl ON r.review_code = rl.review_code
        WHERE r.is_active = 1
        ORDER BY r.created_at DESC
        LIMIT 50
    </select>

    <!-- 포토리뷰 평점순 조회 (기존 메서드) -->
    <select id="getPhotoReviewRating" resultType="map">
        SELECT DISTINCT
            r.review_code,
            r.mem_code as memberCode,
            r.guest_code as guestCode,
            r.rating,
            r.content,
            r.created_at as reviewDate,
            p.product_name as productName,
            img.image_url as productImage,
            ri.image_url as reviewImage,
            COALESCE(rl.like_count, 0) as likeCount,
            CASE
                WHEN r.mem_code IS NOT NULL THEN m.mem_name
                WHEN r.guest_code IS NOT NULL THEN g.guest_name
                ELSE 'Unknown'
                END as writerName
        FROM review r
                 INNER JOIN review_image ri ON r.review_code = ri.review_code
                 INNER JOIN order_items oi ON r.order_item_code = oi.order_item_code
                 INNER JOIN product p ON oi.product_code = p.product_code
                 LEFT JOIN image img ON p.product_code = img.product_code AND img.image_type = 'title'
                 LEFT JOIN member m ON r.mem_code = m.mem_code
                 LEFT JOIN guest g ON r.guest_code = g.guest_code
                 LEFT JOIN (
            SELECT review_code, COUNT(*) as like_count
            FROM review_like
            GROUP BY review_code
        ) rl ON r.review_code = rl.review_code
        WHERE r.is_active = 1
        ORDER BY r.rating DESC, r.created_at DESC
        LIMIT 50
    </select>

    <!-- 포토리뷰 좋아요순 조회 (기존 메서드) -->
    <select id="getPhotoReviewLike" resultType="map">
        SELECT DISTINCT
            r.review_code,
            r.mem_code as memberCode,
            r.guest_code as guestCode,
            r.rating,
            r.content,
            r.created_at as reviewDate,
            p.product_name as productName,
            img.image_url as productImage,
            ri.image_url as reviewImage,
            COALESCE(rl.like_count, 0) as likeCount,
            CASE
                WHEN r.mem_code IS NOT NULL THEN m.mem_name
                WHEN r.guest_code IS NOT NULL THEN g.guest_name
                ELSE 'Unknown'
                END as writerName
        FROM review r
                 INNER JOIN review_image ri ON r.review_code = ri.review_code
                 INNER JOIN order_items oi ON r.order_item_code = oi.order_item_code
                 INNER JOIN product p ON oi.product_code = p.product_code
                 LEFT JOIN image img ON p.product_code = img.product_code AND img.image_type = 'title'
                 LEFT JOIN member m ON r.mem_code = m.mem_code
                 LEFT JOIN guest g ON r.guest_code = g.guest_code
                 LEFT JOIN (
            SELECT review_code, COUNT(*) as like_count
            FROM review_like
            GROUP BY review_code
        ) rl ON r.review_code = rl.review_code
        WHERE r.is_active = 1
        ORDER BY COALESCE(rl.like_count, 0) DESC, r.created_at DESC
        LIMIT 50
    </select>

    <!-- 리뷰 카운트 조회 (기존 메서드) -->
    <select id="getReviewCount" resultType="map">
        SELECT
            (SELECT COUNT(DISTINCT r.review_code)
             FROM review r
                      INNER JOIN review_image ri ON r.review_code = ri.review_code
             WHERE r.is_active = 1) as photoReviews,
            (SELECT COUNT(*)
             FROM review r
             WHERE r.is_active = 1
               AND r.review_code NOT IN (
                 SELECT DISTINCT review_code FROM review_image
             )) as textReviews
    </select>

    <!-- ====== 새로 추가된 텍스트리뷰 쿼리들 ====== -->

    <!-- 텍스트리뷰 최신순 조회 -->
    <select id="getTextReviewDesc" resultType="map">
        SELECT
            r.review_code,
            r.mem_code as memberCode,
            r.guest_code as guestCode,
            r.rating,
            r.content,
            r.created_at as reviewDate,
            p.product_name as productName,
            img.image_url as productImage,
            COALESCE(rl.like_count, 0) as likeCount,
            CASE
                WHEN r.mem_code IS NOT NULL THEN m.mem_name
                WHEN r.guest_code IS NOT NULL THEN g.guest_name
                ELSE 'Unknown'
                END as writerName
        FROM review r
                 INNER JOIN order_items oi ON r.order_item_code = oi.order_item_code
                 INNER JOIN product p ON oi.product_code = p.product_code
                 LEFT JOIN image img ON p.product_code = img.product_code AND img.image_type = 'title'
                 LEFT JOIN member m ON r.mem_code = m.mem_code
                 LEFT JOIN guest g ON r.guest_code = g.guest_code
                 LEFT JOIN (
            SELECT review_code, COUNT(*) as like_count
            FROM review_like
            GROUP BY review_code
        ) rl ON r.review_code = rl.review_code
        WHERE r.is_active = 1
          AND r.review_code NOT IN (
            SELECT DISTINCT review_code FROM review_image
        )
        ORDER BY r.created_at DESC
        LIMIT 50
    </select>

    <!-- 텍스트리뷰 평점순 조회 -->
    <select id="getTextReviewRating" resultType="map">
        SELECT
            r.review_code,
            r.mem_code as memberCode,
            r.guest_code as guestCode,
            r.rating,
            r.content,
            r.created_at as reviewDate,
            p.product_name as productName,
            img.image_url as productImage,
            COALESCE(rl.like_count, 0) as likeCount,
            CASE
                WHEN r.mem_code IS NOT NULL THEN m.mem_name
                WHEN r.guest_code IS NOT NULL THEN g.guest_name
                ELSE 'Unknown'
                END as writerName
        FROM review r
                 INNER JOIN order_items oi ON r.order_item_code = oi.order_item_code
                 INNER JOIN product p ON oi.product_code = p.product_code
                 LEFT JOIN image img ON p.product_code = img.product_code AND img.image_type = 'title'
                 LEFT JOIN member m ON r.mem_code = m.mem_code
                 LEFT JOIN guest g ON r.guest_code = g.guest_code
                 LEFT JOIN (
            SELECT review_code, COUNT(*) as like_count
            FROM review_like
            GROUP BY review_code
        ) rl ON r.review_code = rl.review_code
        WHERE r.is_active = 1
          AND r.review_code NOT IN (
            SELECT DISTINCT review_code FROM review_image
        )
        ORDER BY r.rating DESC, r.created_at DESC
        LIMIT 50
    </select>

    <!-- 텍스트리뷰 좋아요순 조회 -->
    <select id="getTextReviewLike" resultType="map">
        SELECT
            r.review_code,
            r.mem_code as memberCode,
            r.guest_code as guestCode,
            r.rating,
            r.content,
            r.created_at as reviewDate,
            p.product_name as productName,
            img.image_url as productImage,
            COALESCE(rl.like_count, 0) as likeCount,
            CASE
                WHEN r.mem_code IS NOT NULL THEN m.mem_name
                WHEN r.guest_code IS NOT NULL THEN g.guest_name
                ELSE 'Unknown'
                END as writerName
        FROM review r
                 INNER JOIN order_items oi ON r.order_item_code = oi.order_item_code
                 INNER JOIN product p ON oi.product_code = p.product_code
                 LEFT JOIN image img ON p.product_code = img.product_code AND img.image_type = 'title'
                 LEFT JOIN member m ON r.mem_code = m.mem_code
                 LEFT JOIN guest g ON r.guest_code = g.guest_code
                 LEFT JOIN (
            SELECT review_code, COUNT(*) as like_count
            FROM review_like
            GROUP BY review_code
        ) rl ON r.review_code = rl.review_code
        WHERE r.is_active = 1
          AND r.review_code NOT IN (
            SELECT DISTINCT review_code FROM review_image
        )
        ORDER BY COALESCE(rl.like_count, 0) DESC, r.created_at DESC
        LIMIT 50
    </select>

    <!-- ====== 페이지네이션 및 필터링이 적용된 쿼리들 ====== -->

    <!-- 포토리뷰 최신순 조회 (페이지네이션 + 필터링 + 좋아요 상태) -->
    <select id="getPhotoReviewDescWithPaging" resultType="map">
        SELECT DISTINCT
        r.review_code,
        r.mem_code as memberCode,
        r.guest_code as guestCode,
        r.rating,
        r.content,
        r.created_at as reviewDate,
        p.product_name as productName,
        p.product_id as productId,
        img.image_url as productImage,
        ri.image_url as reviewImage,
        COALESCE(rl.like_count, 0) as likeCount,
        CASE
        WHEN r.mem_code IS NOT NULL THEN m.mem_name
        WHEN r.guest_code IS NOT NULL THEN g.guest_name
        ELSE 'Unknown'
        END as writerName,
        CASE
        WHEN user_likes.review_code IS NOT NULL THEN 1
        ELSE 0
        END as isLiked
        FROM review r
        INNER JOIN review_image ri ON r.review_code = ri.review_code AND ri.image_order = 0
        INNER JOIN order_items oi ON r.order_item_code = oi.order_item_code
        INNER JOIN product p ON oi.product_code = p.product_code
        LEFT JOIN image img ON p.product_code = img.product_code AND img.image_type = 'title'
        LEFT JOIN member m ON r.mem_code = m.mem_code
        LEFT JOIN guest g ON r.guest_code = g.guest_code
        LEFT JOIN (
        SELECT review_code, COUNT(*) as like_count
        FROM review_like
        GROUP BY review_code
        ) rl ON r.review_code = rl.review_code
        LEFT JOIN review_like user_likes ON r.review_code = user_likes.review_code
        AND (
        (#{memCode} IS NOT NULL AND user_likes.mem_code = #{memCode})
        OR
        (#{guestCode} IS NOT NULL AND user_likes.guest_code = #{guestCode})
        )
        WHERE r.is_active = 1
        <if test="rating != null">
            <choose>
                <when test="rating == 5">AND r.rating = 5</when>
                <when test="rating == 4">AND r.rating = 4</when>
                <when test="rating == 3">AND r.rating &lt;= 3</when>
            </choose>
        </if>
        ORDER BY r.created_at DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 포토리뷰 평점순 조회 (페이지네이션 + 필터링 + 좋아요 상태) -->
    <select id="getPhotoReviewRatingWithPaging" resultType="map">
        SELECT DISTINCT
        r.review_code,
        r.mem_code as memberCode,
        r.guest_code as guestCode,
        r.rating,
        r.content,
        r.created_at as reviewDate,
        p.product_name as productName,
        p.product_id as productId,
        img.image_url as productImage,
        ri.image_url as reviewImage,
        COALESCE(rl.like_count, 0) as likeCount,
        CASE
        WHEN r.mem_code IS NOT NULL THEN m.mem_name
        WHEN r.guest_code IS NOT NULL THEN g.guest_name
        ELSE 'Unknown'
        END as writerName,
        CASE
        WHEN user_likes.review_code IS NOT NULL THEN 1
        ELSE 0
        END as isLiked
        FROM review r
        INNER JOIN review_image ri ON r.review_code = ri.review_code AND ri.image_order = 0
        INNER JOIN order_items oi ON r.order_item_code = oi.order_item_code
        INNER JOIN product p ON oi.product_code = p.product_code
        LEFT JOIN image img ON p.product_code = img.product_code AND img.image_type = 'title'
        LEFT JOIN member m ON r.mem_code = m.mem_code
        LEFT JOIN guest g ON r.guest_code = g.guest_code
        LEFT JOIN (
        SELECT review_code, COUNT(*) as like_count
        FROM review_like
        GROUP BY review_code
        ) rl ON r.review_code = rl.review_code
        LEFT JOIN review_like user_likes ON r.review_code = user_likes.review_code
        AND (
        (#{memCode} IS NOT NULL AND user_likes.mem_code = #{memCode})
        OR
        (#{guestCode} IS NOT NULL AND user_likes.guest_code = #{guestCode})
        )
        WHERE r.is_active = 1
        <if test="rating != null">
            <choose>
                <when test="rating == 5">AND r.rating = 5</when>
                <when test="rating == 4">AND r.rating = 4</when>
                <when test="rating == 3">AND r.rating &lt;= 3</when>
            </choose>
        </if>
        ORDER BY r.rating DESC, r.created_at DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 포토리뷰 좋아요순 조회 (페이지네이션 + 필터링 + 좋아요 상태) -->
    <select id="getPhotoReviewLikeWithPaging" resultType="map">
        SELECT DISTINCT
        r.review_code,
        r.mem_code as memberCode,
        r.guest_code as guestCode,
        r.rating,
        r.content,
        r.created_at as reviewDate,
        p.product_name as productName,
        p.product_id as productId,
        img.image_url as productImage,
        ri.image_url as reviewImage,
        COALESCE(rl.like_count, 0) as likeCount,
        CASE
        WHEN r.mem_code IS NOT NULL THEN m.mem_name
        WHEN r.guest_code IS NOT NULL THEN g.guest_name
        ELSE 'Unknown'
        END as writerName,
        CASE
        WHEN user_likes.review_code IS NOT NULL THEN 1
        ELSE 0
        END as isLiked
        FROM review r
        INNER JOIN review_image ri ON r.review_code = ri.review_code AND ri.image_order = 0
        INNER JOIN order_items oi ON r.order_item_code = oi.order_item_code
        INNER JOIN product p ON oi.product_code = p.product_code
        LEFT JOIN image img ON p.product_code = img.product_code AND img.image_type = 'title'
        LEFT JOIN member m ON r.mem_code = m.mem_code
        LEFT JOIN guest g ON r.guest_code = g.guest_code
        LEFT JOIN (
        SELECT review_code, COUNT(*) as like_count
        FROM review_like
        GROUP BY review_code
        ) rl ON r.review_code = rl.review_code
        LEFT JOIN review_like user_likes ON r.review_code = user_likes.review_code
        AND (
        (#{memCode} IS NOT NULL AND user_likes.mem_code = #{memCode})
        OR
        (#{guestCode} IS NOT NULL AND user_likes.guest_code = #{guestCode})
        )
        WHERE r.is_active = 1
        <if test="rating != null">
            <choose>
                <when test="rating == 5">AND r.rating = 5</when>
                <when test="rating == 4">AND r.rating = 4</when>
                <when test="rating == 3">AND r.rating &lt;= 3</when>
            </choose>
        </if>
        ORDER BY COALESCE(rl.like_count, 0) DESC, r.created_at DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 텍스트리뷰 최신순 조회 (페이지네이션 + 필터링 + 좋아요 상태) -->
    <select id="getTextReviewDescWithPaging" resultType="map">
        SELECT
        r.review_code,
        r.mem_code as memberCode,
        r.guest_code as guestCode,
        r.rating,
        r.content,
        r.created_at as reviewDate,
        p.product_name as productName,
        p.product_id as productId,
        img.image_url as productImage,
        COALESCE(rl.like_count, 0) as likeCount,
        CASE
        WHEN r.mem_code IS NOT NULL THEN m.mem_name
        WHEN r.guest_code IS NOT NULL THEN g.guest_name
        ELSE 'Unknown'
        END as writerName,
        CASE
        WHEN user_likes.review_code IS NOT NULL THEN 1
        ELSE 0
        END as isLiked
        FROM review r
        INNER JOIN order_items oi ON r.order_item_code = oi.order_item_code
        INNER JOIN product p ON oi.product_code = p.product_code
        LEFT JOIN image img ON p.product_code = img.product_code AND img.image_type = 'title'
        LEFT JOIN member m ON r.mem_code = m.mem_code
        LEFT JOIN guest g ON r.guest_code = g.guest_code
        LEFT JOIN (
        SELECT review_code, COUNT(*) as like_count
        FROM review_like
        GROUP BY review_code
        ) rl ON r.review_code = rl.review_code
        LEFT JOIN review_like user_likes ON r.review_code = user_likes.review_code
        AND (
        (#{memCode} IS NOT NULL AND user_likes.mem_code = #{memCode})
        OR
        (#{guestCode} IS NOT NULL AND user_likes.guest_code = #{guestCode})
        )
        WHERE r.is_active = 1
        AND r.review_code NOT IN (
        SELECT DISTINCT review_code FROM review_image
        )
        <if test="rating != null">
            <choose>
                <when test="rating == 5">AND r.rating = 5</when>
                <when test="rating == 4">AND r.rating = 4</when>
                <when test="rating == 3">AND r.rating &lt;= 3</when>
            </choose>
        </if>
        ORDER BY r.created_at DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 텍스트리뷰 평점순 조회 (페이지네이션 + 필터링 + 좋아요 상태) -->
    <select id="getTextReviewRatingWithPaging" resultType="map">
        SELECT
        r.review_code,
        r.mem_code as memberCode,
        r.guest_code as guestCode,
        r.rating,
        r.content,
        r.created_at as reviewDate,
        p.product_name as productName,
        p.product_id as productId,
        img.image_url as productImage,
        COALESCE(rl.like_count, 0) as likeCount,
        CASE
        WHEN r.mem_code IS NOT NULL THEN m.mem_name
        WHEN r.guest_code IS NOT NULL THEN g.guest_name
        ELSE 'Unknown'
        END as writerName,
        CASE
        WHEN user_likes.review_code IS NOT NULL THEN 1
        ELSE 0
        END as isLiked
        FROM review r
        INNER JOIN order_items oi ON r.order_item_code = oi.order_item_code
        INNER JOIN product p ON oi.product_code = p.product_code
        LEFT JOIN image img ON p.product_code = img.product_code AND img.image_type = 'title'
        LEFT JOIN member m ON r.mem_code = m.mem_code
        LEFT JOIN guest g ON r.guest_code = g.guest_code
        LEFT JOIN (
        SELECT review_code, COUNT(*) as like_count
        FROM review_like
        GROUP BY review_code
        ) rl ON r.review_code = rl.review_code
        LEFT JOIN review_like user_likes ON r.review_code = user_likes.review_code
        AND (
        (#{memCode} IS NOT NULL AND user_likes.mem_code = #{memCode})
        OR
        (#{guestCode} IS NOT NULL AND user_likes.guest_code = #{guestCode})
        )
        WHERE r.is_active = 1
        AND r.review_code NOT IN (
        SELECT DISTINCT review_code FROM review_image
        )
        <if test="rating != null">
            <choose>
                <when test="rating == 5">AND r.rating = 5</when>
                <when test="rating == 4">AND r.rating = 4</when>
                <when test="rating == 3">AND r.rating &lt;= 3</when>
            </choose>
        </if>
        ORDER BY r.rating DESC, r.created_at DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 텍스트리뷰 좋아요순 조회 (페이지네이션 + 필터링 + 좋아요 상태) -->
    <select id="getTextReviewLikeWithPaging" resultType="map">
        SELECT
        r.review_code,
        r.mem_code as memberCode,
        r.guest_code as guestCode,
        r.rating,
        r.content,
        r.created_at as reviewDate,
        p.product_name as productName,
        p.product_id as productId,
        img.image_url as productImage,
        COALESCE(rl.like_count, 0) as likeCount,
        CASE
        WHEN r.mem_code IS NOT NULL THEN m.mem_name
        WHEN r.guest_code IS NOT NULL THEN g.guest_name
        ELSE 'Unknown'
        END as writerName,
        CASE
        WHEN user_likes.review_code IS NOT NULL THEN 1
        ELSE 0
        END as isLiked
        FROM review r
        INNER JOIN order_items oi ON r.order_item_code = oi.order_item_code
        INNER JOIN product p ON oi.product_code = p.product_code
        LEFT JOIN image img ON p.product_code = img.product_code AND img.image_type = 'title'
        LEFT JOIN member m ON r.mem_code = m.mem_code
        LEFT JOIN guest g ON r.guest_code = g.guest_code
        LEFT JOIN (
        SELECT review_code, COUNT(*) as like_count
        FROM review_like
        GROUP BY review_code
        ) rl ON r.review_code = rl.review_code
        LEFT JOIN review_like user_likes ON r.review_code = user_likes.review_code
        AND (
        (#{memCode} IS NOT NULL AND user_likes.mem_code = #{memCode})
        OR
        (#{guestCode} IS NOT NULL AND user_likes.guest_code = #{guestCode})
        )
        WHERE r.is_active = 1
        AND r.review_code NOT IN (
        SELECT DISTINCT review_code FROM review_image
        )
        <if test="rating != null">
            <choose>
                <when test="rating == 5">AND r.rating = 5</when>
                <when test="rating == 4">AND r.rating = 4</when>
                <when test="rating == 3">AND r.rating &lt;= 3</when>
            </choose>
        </if>
        ORDER BY COALESCE(rl.like_count, 0) DESC, r.created_at DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 리뷰 카운트 조회 (필터링 적용) -->
    <select id="getReviewCountWithFilter" resultType="map">
        SELECT
        (SELECT COUNT(DISTINCT r.review_code)
        FROM review r
        INNER JOIN review_image ri ON r.review_code = ri.review_code
        WHERE r.is_active = 1
        <if test="rating != null">
            <choose>
                <when test="rating == 5">AND r.rating = 5</when>
                <when test="rating == 4">AND r.rating = 4</when>
                <when test="rating == 3">AND r.rating &lt;= 3</when>
            </choose>
        </if>
        ) as photoReviews,
        (SELECT COUNT(*)
        FROM review r
        WHERE r.is_active = 1
        AND r.review_code NOT IN (
        SELECT DISTINCT review_code FROM review_image
        )
        <if test="rating != null">
            <choose>
                <when test="rating == 5">AND r.rating = 5</when>
                <when test="rating == 4">AND r.rating = 4</when>
                <when test="rating == 3">AND r.rating &lt;= 3</when>
            </choose>
        </if>
        ) as textReviews
    </select>

    <!-- ====== 좋아요 관련 쿼리들 ====== -->

    <!-- 좋아요 추가 -->
    <insert id="insertReviewLike">
        INSERT INTO review_like (review_code, mem_code, guest_code, created_at)
        VALUES (#{reviewCode}, #{memCode}, #{guestCode}, NOW())
    </insert>

    <!-- 좋아요 삭제 -->
    <delete id="deleteReviewLike">
        DELETE FROM review_like
        WHERE review_code = #{reviewCode}
          AND (
            (#{memCode} IS NOT NULL AND mem_code = #{memCode})
                OR
            (#{guestCode} IS NOT NULL AND guest_code = #{guestCode})
            )
    </delete>

    <!-- 사용자의 좋아요 상태 확인 -->
    <select id="checkUserLikeStatus" resultType="int">
        SELECT COUNT(*)
        FROM review_like
        WHERE review_code = #{reviewCode}
          AND (
            (#{memCode} IS NOT NULL AND mem_code = #{memCode})
                OR
            (#{guestCode} IS NOT NULL AND guest_code = #{guestCode})
            )
    </select>

    <!-- 사용자가 좋아요한 리뷰 목록 조회 -->
    <select id="getUserLikedReviews" resultType="int">
        SELECT review_code
        FROM review_like
        WHERE review_code IN
        <foreach collection="reviewCodes" item="reviewCode" open="(" separator="," close=")">
            #{reviewCode}
        </foreach>
        AND (
        (#{memCode} IS NOT NULL AND mem_code = #{memCode})
        OR
        (#{guestCode} IS NOT NULL AND guest_code = #{guestCode})
        )
    </select>

    <select id="selectBestReviewsWithLikeStatus" resultMap="BestReviewResultMap">
        SELECT
        r.review_code,
        r.mem_code,
        r.guest_code,
        r.order_item_code,
        r.rating,
        r.content,
        r.created_at,
        COALESCE(rl.like_count, 0) as like_count,

        oi.order_item_code,
        oi.order_code,
        oi.product_code,
        oi.create_at as order_create_at,

        p.product_code,
        p.product_id,
        p.product_name,
        p.product_id,

        img.image_code,
        img.image_url,
        'title' as image_type,

        m.mem_name,
        m.mem_birth,
        m.mem_gender,

        g.guest_name,
        g.guest_birth,
        g.guest_gender,

        <!-- 작성자 정보 통합 -->
        CASE
        WHEN r.mem_code IS NOT NULL THEN m.mem_name
        WHEN r.guest_code IS NOT NULL THEN g.guest_name
        ELSE NULL
        END as writer_name,

        CASE
        WHEN r.mem_code IS NOT NULL THEN m.mem_birth
        WHEN r.guest_code IS NOT NULL THEN g.guest_birth
        ELSE NULL
        END as writer_birth,

        CASE
        WHEN r.mem_code IS NOT NULL THEN 'member'
        WHEN r.guest_code IS NOT NULL THEN 'guest'
        ELSE 'unknown'
        END as writer_type,

        <!-- ⭐ 사용자별 좋아요 상태 -->
        CASE
        WHEN user_likes.review_code IS NOT NULL THEN 1
        ELSE 0
        END as is_liked

        FROM review r
        -- 리뷰별 좋아요 수 계산
        LEFT JOIN (
        SELECT
        review_code,
        COUNT(*) as like_count
        FROM review_like
        GROUP BY review_code
        ) rl ON r.review_code = rl.review_code

        -- ⭐ 사용자별 좋아요 상태 확인
        LEFT JOIN review_like user_likes ON r.review_code = user_likes.review_code
        AND (
        (#{memCode} IS NOT NULL AND user_likes.mem_code = #{memCode})
        OR
        (#{guestCode} IS NOT NULL AND user_likes.guest_code = #{guestCode})
        )

        -- 주문 아이템 정보
        INNER JOIN order_items oi ON r.order_item_code = oi.order_item_code
        -- 상품 정보
        INNER JOIN product p ON oi.product_code = p.product_code
        -- 상품 대표 이미지 (title 타입)
        LEFT JOIN image img ON p.product_code = img.product_code
        AND img.image_type = 'title'
        -- 회원 정보 (있는 경우)
        LEFT JOIN member m ON r.mem_code = m.mem_code
        -- 비회원 정보 (있는 경우)
        LEFT JOIN guest g ON r.guest_code = g.guest_code
        -- 리뷰가 활성화된 것만
        WHERE r.is_active = 1
        -- 좋아요 수 내림차순, 그 다음 리뷰 작성일 내림차순
        ORDER BY COALESCE(rl.like_count, 0) DESC, r.created_at DESC
        -- 베스트 리뷰 12개
        LIMIT 12
    </select>

    <!-- 내 포토리뷰 조회 쿼리 수정 -->
    <select id="getMyPhotoReviews" resultType="map">
        SELECT
        r.review_code as reviewCode,
        r.mem_code as memberCode,
        r.guest_code as guestCode,
        r.rating,
        r.content,
        r.created_at as reviewDate,
        p.product_name as productName,
        -- ⭐ writerName 수정: 회원/비회원에 따라 다르게 처리
        CASE
        WHEN r.mem_code IS NOT NULL THEN CONCAT(SUBSTRING(m.mem_name, 1, 1), '***')
        ELSE CONCAT(SUBSTRING(g.guest_name, 1, 1), '***')
        END as writerName,
        i.image_url as productImage,
        ri.image_url as reviewImage,
        COALESCE(rl.like_count, 0) as likeCount,
        CASE
        WHEN user_likes.review_code IS NOT NULL THEN 1
        ELSE 0
        END as isLiked
        FROM review r
        INNER JOIN order_items oi ON r.order_item_code = oi.order_item_code
        INNER JOIN product p ON oi.product_code = p.product_code
        INNER JOIN review_image ri ON r.review_code = ri.review_code AND ri.image_order = 0
        LEFT JOIN member m ON r.mem_code = m.mem_code
        LEFT JOIN guest g ON r.guest_code = g.guest_code
        LEFT JOIN image i ON p.product_code = i.product_code AND i.image_type = 'TITLE'
        LEFT JOIN (
        SELECT review_code, COUNT(*) as like_count
        FROM review_like
        GROUP BY review_code
        ) rl ON r.review_code = rl.review_code
        LEFT JOIN (
        SELECT review_code
        FROM review_like
        WHERE (#{memCode} IS NOT NULL AND mem_code = #{memCode})
        OR (#{guestCode} IS NOT NULL AND guest_code = #{guestCode})
        ) user_likes ON r.review_code = user_likes.review_code
        WHERE r.is_active = 1
        AND (
        (#{memCode} IS NOT NULL AND r.mem_code = #{memCode})
        OR
        (#{guestCode} IS NOT NULL AND r.guest_code = #{guestCode})
        )
        <if test="rating != null">
            <choose>
                <when test="rating == 5">AND r.rating = 5</when>
                <when test="rating == 4">AND r.rating = 4</when>
                <when test="rating == 3">AND r.rating &lt;= 3</when>
            </choose>
        </if>
        ORDER BY
        <choose>
            <when test="sort == 'latest'">r.created_at DESC</when>
            <when test="sort == 'rating'">r.rating DESC, r.created_at DESC</when>
            <when test="sort == 'likes'">COALESCE(rl.like_count, 0) DESC, r.created_at DESC</when>
            <otherwise>r.created_at DESC</otherwise>
        </choose>
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 내 텍스트리뷰 조회 쿼리도 동일하게 수정 -->
    <select id="getMyTextReviews" resultType="map">
        SELECT
        r.review_code as reviewCode,
        r.mem_code as memberCode,
        r.guest_code as guestCode,
        r.rating,
        r.content,
        r.created_at as reviewDate,
        p.product_name as productName,
        -- ⭐ writerName 수정: 회원/비회원에 따라 다르게 처리
        CASE
        WHEN r.mem_code IS NOT NULL THEN CONCAT(SUBSTRING(m.mem_name, 1, 1), '***')
        ELSE CONCAT(SUBSTRING(g.guest_name, 1, 1), '***')
        END as writerName,
        i.image_url as productImage,
        COALESCE(rl.like_count, 0) as likeCount,
        CASE
        WHEN user_likes.review_code IS NOT NULL THEN 1
        ELSE 0
        END as isLiked
        FROM review r
        INNER JOIN order_items oi ON r.order_item_code = oi.order_item_code
        INNER JOIN product p ON oi.product_code = p.product_code
        LEFT JOIN member m ON r.mem_code = m.mem_code
        LEFT JOIN guest g ON r.guest_code = g.guest_code
        LEFT JOIN image i ON p.product_code = i.product_code AND i.image_type = 'TITLE'
        LEFT JOIN (
        SELECT review_code, COUNT(*) as like_count
        FROM review_like
        GROUP BY review_code
        ) rl ON r.review_code = rl.review_code
        LEFT JOIN (
        SELECT review_code
        FROM review_like
        WHERE (#{memCode} IS NOT NULL AND mem_code = #{memCode})
        OR (#{guestCode} IS NOT NULL AND guest_code = #{guestCode})
        ) user_likes ON r.review_code = user_likes.review_code
        WHERE r.is_active = 1
        AND r.review_code NOT IN (
        SELECT DISTINCT review_code FROM review_image
        )
        AND (
        (#{memCode} IS NOT NULL AND r.mem_code = #{memCode})
        OR
        (#{guestCode} IS NOT NULL AND r.guest_code = #{guestCode})
        )
        <if test="rating != null">
            <choose>
                <when test="rating == 5">AND r.rating = 5</when>
                <when test="rating == 4">AND r.rating = 4</when>
                <when test="rating == 3">AND r.rating &lt;= 3</when>
            </choose>
        </if>
        ORDER BY
        <choose>
            <when test="sort == 'latest'">r.created_at DESC</when>
            <when test="sort == 'rating'">r.rating DESC, r.created_at DESC</when>
            <when test="sort == 'likes'">COALESCE(rl.like_count, 0) DESC, r.created_at DESC</when>
            <otherwise>r.created_at DESC</otherwise>
        </choose>
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 내 리뷰 카운트 조회 -->
    <select id="getMyReviewCount" resultType="map">
        SELECT
        (SELECT COUNT(DISTINCT r.review_code)
        FROM review r
        INNER JOIN review_image ri ON r.review_code = ri.review_code
        WHERE r.is_active = 1
        AND (
        (#{memCode} IS NOT NULL AND r.mem_code = #{memCode})
        OR
        (#{guestCode} IS NOT NULL AND r.guest_code = #{guestCode})
        )
        <if test="rating != null">
            <choose>
                <when test="rating == 5">AND r.rating = 5</when>
                <when test="rating == 4">AND r.rating = 4</when>
                <when test="rating == 3">AND r.rating &lt;= 3</when>
            </choose>
        </if>
        ) as photoReviews,
        (SELECT COUNT(*)
        FROM review r
        WHERE r.is_active = 1
        AND r.review_code NOT IN (
        SELECT DISTINCT review_code FROM review_image
        )
        AND (
        (#{memCode} IS NOT NULL AND r.mem_code = #{memCode})
        OR
        (#{guestCode} IS NOT NULL AND r.guest_code = #{guestCode})
        )
        <if test="rating != null">
            <choose>
                <when test="rating == 5">AND r.rating = 5</when>
                <when test="rating == 4">AND r.rating = 4</when>
                <when test="rating == 3">AND r.rating &lt;= 3</when>
            </choose>
        </if>
        ) as textReviews
    </select>

    <!-- 본인 리뷰인지 확인 -->
    <select id="checkIsMyReview" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM review
        WHERE review_code = #{reviewCode}
          AND is_active = 1
          AND (
            (#{memCode} IS NOT NULL AND mem_code = #{memCode})
                OR
            (#{guestCode} IS NOT NULL AND guest_code = #{guestCode})
            )
    </select>

    <!-- 리뷰 비활성화 -->
    <update id="deactivateReview">
        UPDATE review
        SET is_active = 0, updated_at = NOW()
        WHERE review_code = #{reviewCode}
          AND is_active = 1
    </update>

    <!-- 리뷰 상세 조회용 ResultMap -->
    <resultMap id="ReviewDetailResultMap" type="com.hollybam.hollybam.dto.ReviewDetailDto">
        <!-- 리뷰 기본 정보 -->
        <id property="reviewCode" column="review_code"/>
        <result property="memCode" column="mem_code"/>
        <result property="guestCode" column="guest_code"/>
        <result property="orderItemCode" column="order_item_code"/>
        <result property="rating" column="rating"/>
        <result property="content" column="content"/>
        <result property="isActive" column="is_active"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="likeCount" column="like_count"/>

        <!-- 작성자 정보 (가공된) -->
        <result property="writerName" column="writer_name"/>
        <result property="writerAge" column="writer_age"/>
        <result property="writerGender" column="writer_gender"/>
        <result property="writerType" column="writer_type"/>

        <!-- 현재 사용자 권한 -->
        <result property="isLiked" column="is_liked"/>
        <result property="canEdit" column="can_edit"/>
        <result property="canDelete" column="can_delete"/>

        <!-- 상품 정보 -->
        <association property="productDto" javaType="com.hollybam.hollybam.dto.ProductDto">
            <id property="productCode" column="product_code"/>
            <result property="productId" column="product_id"/>
            <result property="productName" column="product_name"/>
        </association>

        <!-- 상품 옵션 정보 -->
        <association property="productOptionDto" javaType="com.hollybam.hollybam.dto.ProductOptionDto">
            <id property="optionCode" column="option_code"/>
            <result property="optionName" column="option_name"/>
            <result property="optionValue" column="option_value"/>
            <result property="optionPrice" column="option_price"/>
        </association>

        <!-- 상품 대표 이미지 -->
        <association property="productImageDto" javaType="com.hollybam.hollybam.dto.ImageDto">
            <result property="imageUrl" column="product_image_url"/>
        </association>

        <!-- 주문 아이템 정보 -->
        <association property="orderItemDto" javaType="com.hollybam.hollybam.dto.OrderItemDto">
            <id property="orderItemCode" column="order_item_code"/>
            <result property="quantity" column="quantity"/>
            <result property="unitPrice" column="unit_price"/>
            <result property="totalPrice" column="total_price"/>
        </association>
    </resultMap>

    <!-- 리뷰 상세 조회 -->
    <select id="selectReviewDetail" resultMap="ReviewDetailResultMap">
        SELECT
            r.review_code,
            r.mem_code,
            r.guest_code,
            r.order_item_code,
            r.rating,
            r.content,
            r.is_active,
            r.created_at,
            r.updated_at,
            COALESCE(rl.like_count, 0) as like_count,

            -- 상품 정보
            p.product_code,
            p.product_id,
            p.product_name,

            -- 상품 옵션 정보
            po.option_code,
            po.option_name,
            po.option_value,
            po.option_price,

            -- 상품 대표 이미지
            img.image_url as product_image_url,

            -- 주문 아이템 정보
            oi.quantity,
            oi.unit_price,
            oi.total_price,

            -- 작성자 정보 (마스킹 처리)
            CASE
                WHEN r.mem_code IS NOT NULL THEN
                    CONCAT(LEFT(m.mem_name, 1), REPEAT('*', CHAR_LENGTH(m.mem_name) - 2), RIGHT(m.mem_name, 1))
                WHEN r.guest_code IS NOT NULL THEN
                    CONCAT(LEFT(g.guest_name, 1), REPEAT('*', CHAR_LENGTH(g.guest_name) - 2), RIGHT(g.guest_name, 1))
                ELSE 'Unknown'
                END as writer_name,

            CASE
                WHEN r.mem_code IS NOT NULL THEN
                    CONCAT(FLOOR((YEAR(CURDATE()) - YEAR(m.mem_birth)) / 10) * 10, '대')
                WHEN r.guest_code IS NOT NULL THEN
                    CONCAT(FLOOR((YEAR(CURDATE()) - YEAR(g.guest_birth)) / 10) * 10, '대')
                ELSE ''
                END as writer_age,

            CASE
                WHEN r.mem_code IS NOT NULL THEN m.mem_gender
                WHEN r.guest_code IS NOT NULL THEN g.guest_gender
                ELSE ''
                END as writer_gender,

            CASE
                WHEN r.mem_code IS NOT NULL THEN 'member'
                WHEN r.guest_code IS NOT NULL THEN 'guest'
                ELSE ''
                END as writer_type,

            -- 현재 사용자 좋아요 상태 (매개변수로 전달받아야 함)
            0 as is_liked,
            0 as can_edit,
            0 as can_delete

        FROM review r
                 INNER JOIN order_items oi ON r.order_item_code = oi.order_item_code
                 INNER JOIN product p ON oi.product_code = p.product_code
                 LEFT JOIN product_option po ON oi.option_code = po.option_code
                 LEFT JOIN image img ON p.product_code = img.product_code AND img.image_type = 'title'
                 LEFT JOIN member m ON r.mem_code = m.mem_code
                 LEFT JOIN guest g ON r.guest_code = g.guest_code
                 LEFT JOIN (
            SELECT review_code, COUNT(*) as like_count
            FROM review_like
            GROUP BY review_code
        ) rl ON r.review_code = rl.review_code
        WHERE r.review_code = #{reviewCode}
          AND r.is_active = 1
    </select>

    <!-- 리뷰 이미지 목록 조회 -->
    <select id="selectReviewImages" resultType="com.hollybam.hollybam.dto.ReviewImageDto">
        SELECT
            review_image_code as reviewImageCode,
            review_code as reviewCode,
            image_url as imageUrl,
            image_order as imageOrder,
            created_at as createdAt
        FROM review_image
        WHERE review_code = #{reviewCode}
        ORDER BY image_order ASC
    </select>

    <!-- 리뷰 좋아요 수 조회 -->
    <select id="selectReviewLikeCount" resultType="int">
        SELECT COUNT(*)
        FROM review_like
        WHERE review_code = #{reviewCode}
    </select>

    <!-- 사용자의 리뷰 좋아요 여부 조회 -->
    <select id="selectUserReviewLikeStatus" resultType="int">
        SELECT COUNT(*)
        FROM review_like
        WHERE review_code = #{reviewCode}
          AND (
            (#{memCode} IS NOT NULL AND mem_code = #{memCode})
                OR
            (#{guestCode} IS NOT NULL AND guest_code = #{guestCode})
            )
    </select>

    <!-- 같은 상품의 관련 리뷰 조회 -->
    <select id="selectRelatedReviews" resultType="map">
        SELECT
            r.review_code,
            r.rating,
            r.content,
            r.created_at as reviewDate,
            p.product_name as productName,
            COALESCE(img.image_url, '') as productImage,
            COALESCE(ri.image_url, '') as reviewImage,  -- 빈 문자열로 기본값 설정
            COALESCE(rl.like_count, 0) as likeCount,
            CASE
                WHEN r.mem_code IS NOT NULL THEN
                    CONCAT(LEFT(m.mem_name, 1), REPEAT('*', CHAR_LENGTH(m.mem_name) - 2), RIGHT(m.mem_name, 1))
                WHEN r.guest_code IS NOT NULL THEN
                    CONCAT(LEFT(g.guest_name, 1), REPEAT('*', CHAR_LENGTH(g.guest_name) - 2), RIGHT(g.guest_name, 1))
                ELSE 'Unknown'
                END as writerName
        FROM review r
                 INNER JOIN order_items oi ON r.order_item_code = oi.order_item_code
                 INNER JOIN product p ON oi.product_code = p.product_code
                 LEFT JOIN image img ON p.product_code = img.product_code AND img.image_type = 'title'
                 LEFT JOIN member m ON r.mem_code = m.mem_code
                 LEFT JOIN guest g ON r.guest_code = g.guest_code
                 LEFT JOIN (
            SELECT review_code, MIN(image_url) as image_url
            FROM review_image
            GROUP BY review_code
        ) ri ON r.review_code = ri.review_code
                 LEFT JOIN (
            SELECT review_code, COUNT(*) as like_count
            FROM review_like
            GROUP BY review_code
        ) rl ON r.review_code = rl.review_code

        WHERE oi.product_code = #{productCode}
          AND r.review_code != #{currentReviewCode}
          AND r.is_active = 1
        ORDER BY COALESCE(rl.like_count, 0) DESC, r.created_at DESC
        LIMIT #{limit}
    </select>

    <!-- 리뷰 작성자 확인 -->
    <select id="checkReviewOwnership" resultType="int">
        SELECT COUNT(*)
        FROM review
        WHERE review_code = #{reviewCode}
          AND (
            (#{memCode} IS NOT NULL AND mem_code = #{memCode})
                OR
            (#{guestCode} IS NOT NULL AND guest_code = #{guestCode})
            )
    </select>

    <!-- 리뷰 내용 및 평점 수정 -->
    <update id="updateReviewContent">
        UPDATE review
        SET content = #{content},
            rating = #{rating},
            updated_at = NOW()
        WHERE review_code = #{reviewCode}
    </update>

    <!-- 리뷰 논리 삭제 -->
    <update id="deleteReviewLogical">
        delete
        from review
        WHERE review_code = #{reviewCode}
    </update>

    <!-- 리뷰 이미지 삭제 -->
    <delete id="deleteReviewImages">
        DELETE FROM review_image
        WHERE review_image_code IN
        <foreach item="imageId" collection="imageIds" open="(" separator="," close=")">
            #{imageId}
        </foreach>
    </delete>

    <!-- 상품별 포토리뷰 조회 (기존 getPhotoReviews 패턴 + 상품 조건 추가) -->
    <select id="getProductPhotoReviews" resultType="map">
        SELECT DISTINCT
        r.review_code,
        r.mem_code as memberCode,
        r.guest_code as guestCode,
        r.rating,
        r.content,
        r.created_at as reviewDate,
        p.product_name as productName,
        img.image_url as productImage,
        ri.image_url as reviewImage,
        COALESCE(rl.like_count, 0) as likeCount,

        <!-- 작성자 정보 (기존 패턴 그대로) -->
        CASE
        WHEN r.mem_code IS NOT NULL THEN CONCAT(LEFT(m.mem_name, 1), REPEAT('○', CHAR_LENGTH(m.mem_name) - 1))
        WHEN r.guest_code IS NOT NULL THEN CONCAT(LEFT(g.guest_name, 1), REPEAT('○', CHAR_LENGTH(g.guest_name) - 1))
        ELSE 'Unknown'
        END as writerName,

        <!-- 작성자 연령대 -->
        CASE
        WHEN r.mem_code IS NOT NULL THEN CONCAT(FLOOR((YEAR(CURDATE()) - YEAR(m.mem_birth)) / 10) * 10, '대')
        WHEN r.guest_code IS NOT NULL THEN CONCAT(FLOOR((YEAR(CURDATE()) - YEAR(g.guest_birth)) / 10) * 10, '대')
        ELSE ''
        END as writerAge,

        <!-- 성별 -->
        CASE
        WHEN r.mem_code IS NOT NULL THEN m.mem_gender
        WHEN r.guest_code IS NOT NULL THEN g.guest_gender
        ELSE ''
        END as writerGender,

        <!-- 현재 사용자의 좋아요 상태 -->
        CASE
        WHEN user_likes.review_code IS NOT NULL THEN 1
        ELSE 0
        END as isLiked

        FROM review r
        INNER JOIN review_image ri ON r.review_code = ri.review_code
        INNER JOIN order_items oi ON r.order_item_code = oi.order_item_code
        INNER JOIN product p ON oi.product_code = p.product_code
        LEFT JOIN image img ON p.product_code = img.product_code AND img.image_type = 'title'
        LEFT JOIN member m ON r.mem_code = m.mem_code
        LEFT JOIN guest g ON r.guest_code = g.guest_code

        <!-- 리뷰별 좋아요 수 계산 -->
        LEFT JOIN (
        SELECT review_code, COUNT(*) as like_count
        FROM review_like
        GROUP BY review_code
        ) rl ON r.review_code = rl.review_code

        <!-- 현재 사용자의 좋아요 상태 확인 -->
        LEFT JOIN review_like user_likes ON r.review_code = user_likes.review_code
        AND (
        (#{memCode} IS NOT NULL AND user_likes.mem_code = #{memCode})
        OR
        (#{guestCode} IS NOT NULL AND user_likes.guest_code = #{guestCode})
        )

        WHERE r.is_active = 1
        AND p.product_code = #{productCode}  <!-- 상품별 조건 추가 -->

        <!-- 평점 필터 -->
        <if test="rating != null">
            AND r.rating = #{rating}
        </if>

        <!-- 정렬 조건 (기존 패턴 그대로) -->
        <choose>
            <when test="sort == 'latest'">
                ORDER BY r.created_at DESC
            </when>
            <when test="sort == 'rating'">
                ORDER BY r.rating DESC, r.created_at DESC
            </when>
            <when test="sort == 'likes'">
                ORDER BY COALESCE(rl.like_count, 0) DESC, r.created_at DESC
            </when>
            <otherwise>
                ORDER BY r.created_at DESC
            </otherwise>
        </choose>

        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 상품별 텍스트리뷰 조회 (기존 getTextReviews 패턴 + 상품 조건 추가) -->
    <select id="getProductTextReviews" resultType="map">
        SELECT
        r.review_code,
        r.mem_code as memberCode,
        r.guest_code as guestCode,
        r.rating,
        r.content,
        r.created_at as reviewDate,
        p.product_name as productName,
        img.image_url as productImage,
        COALESCE(rl.like_count, 0) as likeCount,

        <!-- 작성자 정보 (기존 패턴 그대로) -->
        CASE
        WHEN r.mem_code IS NOT NULL THEN CONCAT(LEFT(m.mem_name, 1), REPEAT('○', CHAR_LENGTH(m.mem_name) - 1))
        WHEN r.guest_code IS NOT NULL THEN CONCAT(LEFT(g.guest_name, 1), REPEAT('○', CHAR_LENGTH(g.guest_name) - 1))
        ELSE 'Unknown'
        END as writerName,

        <!-- 작성자 연령대 -->
        CASE
        WHEN r.mem_code IS NOT NULL THEN CONCAT(FLOOR((YEAR(CURDATE()) - YEAR(m.mem_birth)) / 10) * 10, '대')
        WHEN r.guest_code IS NOT NULL THEN CONCAT(FLOOR((YEAR(CURDATE()) - YEAR(g.guest_birth)) / 10) * 10, '대')
        ELSE ''
        END as writerAge,

        <!-- 성별 -->
        CASE
        WHEN r.mem_code IS NOT NULL THEN m.mem_gender
        WHEN r.guest_code IS NOT NULL THEN g.guest_gender
        ELSE ''
        END as writerGender,

        <!-- 현재 사용자의 좋아요 상태 -->
        CASE
        WHEN user_likes.review_code IS NOT NULL THEN 1
        ELSE 0
        END as isLiked

        FROM review r
        INNER JOIN order_items oi ON r.order_item_code = oi.order_item_code
        INNER JOIN product p ON oi.product_code = p.product_code
        LEFT JOIN image img ON p.product_code = img.product_code AND img.image_type = 'title'
        LEFT JOIN member m ON r.mem_code = m.mem_code
        LEFT JOIN guest g ON r.guest_code = g.guest_code

        <!-- 리뷰별 좋아요 수 계산 -->
        LEFT JOIN (
        SELECT review_code, COUNT(*) as like_count
        FROM review_like
        GROUP BY review_code
        ) rl ON r.review_code = rl.review_code

        <!-- 현재 사용자의 좋아요 상태 확인 -->
        LEFT JOIN review_like user_likes ON r.review_code = user_likes.review_code
        AND (
        (#{memCode} IS NOT NULL AND user_likes.mem_code = #{memCode})
        OR
        (#{guestCode} IS NOT NULL AND user_likes.guest_code = #{guestCode})
        )

        WHERE r.is_active = 1
        AND p.product_code = #{productCode}  <!-- 상품별 조건 추가 -->
        AND r.review_code NOT IN (
        SELECT DISTINCT review_code FROM review_image
        )

        <!-- 평점 필터 -->
        <if test="rating != null">
            AND r.rating = #{rating}
        </if>

        <!-- 정렬 조건 (기존 패턴 그대로) -->
        <choose>
            <when test="sort == 'latest'">
                ORDER BY r.created_at DESC
            </when>
            <when test="sort == 'rating'">
                ORDER BY r.rating DESC, r.created_at DESC
            </when>
            <when test="sort == 'likes'">
                ORDER BY COALESCE(rl.like_count, 0) DESC, r.created_at DESC
            </when>
            <otherwise>
                ORDER BY r.created_at DESC
            </otherwise>
        </choose>

        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 상품별 리뷰 카운트 조회 (기존 getReviewCount 패턴 + 상품 조건 추가) -->
    <select id="getProductReviewCount" resultType="map">
        SELECT
        (SELECT COUNT(DISTINCT r.review_code)
        FROM review r
        INNER JOIN review_image ri ON r.review_code = ri.review_code
        INNER JOIN order_items oi ON r.order_item_code = oi.order_item_code
        WHERE r.is_active = 1
        AND oi.product_code = #{productCode}  <!-- 상품별 조건 추가 -->
        <if test="rating != null">
            AND r.rating = #{rating}
        </if>
        ) as photoReviews,

        (SELECT COUNT(*)
        FROM review r
        INNER JOIN order_items oi ON r.order_item_code = oi.order_item_code
        WHERE r.is_active = 1
        AND oi.product_code = #{productCode}  <!-- 상품별 조건 추가 -->
        AND r.review_code NOT IN (
        SELECT DISTINCT review_code FROM review_image
        )
        <if test="rating != null">
            AND r.rating = #{rating}
        </if>
        ) as textReviews
    </select>

    <select id="getProductRatingCounts"
            parameterType="int"
            resultType="java.util.Map">
        SELECT
            SUM(r.rating = 5) AS cnt5,
            SUM(r.rating = 4) AS cnt4,
            SUM(r.rating = 3) AS cnt3,
            SUM(r.rating = 2) AS cnt2,
            SUM(r.rating = 1) AS cnt1
        FROM review r
                 JOIN order_items oi
                      ON r.order_item_code = oi.order_item_code
        WHERE oi.product_code = #{productCode}
          AND r.is_active = 1
    </select>
</mapper>