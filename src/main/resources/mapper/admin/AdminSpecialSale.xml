<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.hollybam.hollybam.dao.admin.IF_AdminSpecialSaleDao">
    <select id="selectCategory" resultType="map">
        select cate_code as categoryCode, cate_name as categoryName
        from hollybam.category
    </select>
    <select id="selectCategoryDetail" parameterType="String" resultType="map">
        select cd_code as cdCode, cd_name as cdName
        from hollybam.category_detail
        where cate_code = #{categoryCode}
    </select>
    <select id="searchProducts" resultType="map">
        SELECT
        p.product_code as productCode,
        p.product_name as productName,
        p.product_id as productId,
        pr.price_original as productOriginal,
        pr.price_selling as productSelling,
        i.image_url as productImage
        FROM product p
        LEFT JOIN price pr ON p.product_code = pr.product_code
        LEFT JOIN image i ON p.product_code = i.product_code
        AND i.image_type = 'title'
        WHERE 1 = 1
        <if test="cateCode != null and cateCode != ''">
            AND p.cate_code = #{cateCode}
        </if>
        <if test="cdCode != null and cdCode != ''">
            AND p.cd_code = #{cdCode}
        </if>
        <if test="keyword != null and keyword != ''">
            AND (
            p.product_name LIKE CONCAT('%', #{keyword}, '%')
            OR p.product_id LIKE CONCAT('%', #{keyword}, '%')
            )
        </if>
    </select>

    <select id="selectOriginalPrice" parameterType="int" resultType="int">
        select price_original
        from price
        where product_code = #{productCode}
    </select>

    <insert id="insertSpecialSaleProducts" parameterType="java.util.List">
        INSERT INTO special_sale (product_code, special_sale_price, start_date, special_sale_per)
        VALUES
        <foreach collection="list" item="item" separator=",">
            (
            #{item.productCode},
            #{item.salePrice},
            #{item.startDate},
            #{item.salePercent}
            )
        </foreach>
    </insert>

    <select id="selectSpecialSaleList" parameterType="String" resultType="map">
        SELECT
            ss.special_sale_code AS specialSaleCode,
            ss.product_code AS productCode,
            ss.special_sale_price AS specialSalePrice,
            ss.start_date AS startDate,
            ss.special_sale_per AS specialSalePer,
            p.product_name AS productName,
            p.product_id AS productId,
            pr.price_original AS priceOriginal,
            pr.price_selling AS priceSelling,
            i.image_url AS imageUrl,

            -- wishlist count
            COALESCE(w.wishlistCount, 0) AS wishlistCount,

            -- 리뷰 평균 평점 및 리뷰 수
            COALESCE(rv.reviewAvg, 0) AS reviewAvg,
            COALESCE(rv.reviewCount, 0) AS reviewCount

        FROM special_sale ss
                 JOIN product p ON ss.product_code = p.product_code
                 LEFT JOIN price pr ON p.product_code = pr.product_code
                 LEFT JOIN image i ON p.product_code = i.product_code AND i.image_type = 'title'

            -- wishlist count 서브쿼리
                 LEFT JOIN (
            SELECT
                product_code,
                COUNT(*) AS wishlistCount
            FROM wishlist
            GROUP BY product_code
        ) w ON p.product_code = w.product_code

            -- review 평균 평점 및 리뷰 수 서브쿼리
                 LEFT JOIN (
            SELECT
                oi.product_code,
                ROUND(AVG(r.rating), 1) AS reviewAvg,
                COUNT(*) AS reviewCount
            FROM review r
                     JOIN order_items oi ON r.order_item_code = oi.order_item_code
            GROUP BY oi.product_code
        ) rv ON p.product_code = rv.product_code

        WHERE ss.start_date = #{startDate}
    </select>

    <!-- 스케줄러용: 현재 월과 같은 월의 특가 상품 활성화 -->
    <update id="activateCurrentMonthSpecialSales" parameterType="map">
        UPDATE special_sale
        SET active = 1, update_at = CURRENT_TIMESTAMP
        WHERE YEAR(start_date) = #{year} AND MONTH(start_date) = #{month}
    </update>

    <!-- 스케줄러용: 현재 월이 아닌 특가 상품들 비활성화 -->
    <update id="deactivateNotCurrentMonthSpecialSales" parameterType="map">
        UPDATE special_sale
        SET active = 0, update_at = CURRENT_TIMESTAMP
        WHERE NOT (YEAR(start_date) = #{year} AND MONTH(start_date) = #{month})
    </update>

    <!-- 현재 월의 특가 상품들만 활성화 (월별 관리 방식) -->
    <update id="activateSpecialSalesByMonth" parameterType="map">
        UPDATE special_sale
        SET active = 1, update_at = CURRENT_TIMESTAMP
        WHERE YEAR(start_date) = #{year} AND MONTH(start_date) = #{month}
    </update>

    <!-- 현재 월이 아닌 특가 상품들 비활성화 -->
    <update id="deactivateSpecialSalesNotCurrentMonth" parameterType="map">
        UPDATE special_sale
        SET active = 0, update_at = CURRENT_TIMESTAMP
        WHERE NOT (YEAR(start_date) = #{year} AND MONTH(start_date) = #{month})
    </update>

    <!-- 활성화된 특가 상품 개수 조회 -->
    <select id="countActiveSpecialSales" resultType="int">
        SELECT COUNT(*)
        FROM special_sale
        WHERE active = 1
    </select>

</mapper>