<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hollybam.hollybam.dao.IF_ReviewDao">

    <!-- 주문 상태 조회 -->
    <select id="getOrderStatusByOrderItemCode" resultType="String">
        SELECT o.order_status
        FROM orders o
                 JOIN order_items oi ON o.order_code = oi.order_code
        WHERE oi.order_item_code = #{orderItemCode}
    </select>

    <!-- 이미 리뷰가 작성되었는지 확인 -->
    <select id="countExistingReview" resultType="int">
        SELECT COUNT(*)
        FROM review
        WHERE order_item_code = #{orderItemCode}
          AND (
            (#{memCode} IS NOT NULL AND mem_code = #{memCode})
                OR
            (#{guestCode} IS NOT NULL AND guest_code = #{guestCode})
            )
    </select>

    <insert id="insertReview" parameterType="ReviewDto" useGeneratedKeys="true" keyProperty="reviewCode">
        INSERT INTO review (
            order_item_code,
            mem_code,
            guest_code,
            rating,
            content,
            is_active,
            created_at
        )
        VALUES (
                   #{orderItemCode},
                   #{memCode},
                   #{guestCode},
                   #{rating},
                   #{content},
                   1,
                   NOW()
               )
    </insert>

    <insert id="insertReviewImage" parameterType="ReviewImageDto">
        INSERT INTO review_image (
            review_code,
            image_url
        )
        VALUES (
                   #{reviewCode},
                   #{imageUrl}
               )
    </insert>
    
    <select id="isWroteReview" parameterType="int" resultType="int">
        select count(*)
        from review
        where order_item_code = #{orderItemCode}
    </select>

    <!-- 베스트 리뷰 조회용 ResultMap -->
    <resultMap id="BestReviewResultMap" type="com.hollybam.hollybam.dto.BestReviewDto">
        <!-- 리뷰 기본 정보 -->
        <id property="reviewCode" column="review_code"/>
        <result property="memCode" column="mem_code"/>
        <result property="guestCode" column="guest_code"/>
        <result property="orderItemCode" column="order_item_code"/>
        <result property="rating" column="rating"/>
        <result property="content" column="content"/>
        <result property="likeCount" column="like_count"/>
        <result property="createdAt" column="created_at"/>

        <!-- 작성자 정보 (플랫 구조) -->
        <result property="writerName" column="writer_name"/>
        <result property="writerBirth" column="writer_birth"/>
        <result property="writerType" column="writer_type"/>

        <!-- 주문 아이템 정보 -->
        <association property="orderItemDto" javaType="com.hollybam.hollybam.dto.OrderItemDto">
            <id property="orderItemCode" column="order_item_code"/>
            <result property="orderCode" column="order_code"/>
            <result property="productCode" column="product_code"/>
            <result property="createAt" column="order_create_at"/>
        </association>

        <!-- 상품 정보 -->
        <association property="productDto" javaType="com.hollybam.hollybam.dto.ProductDto">
            <id property="productCode" column="product_code"/>
            <result property="productId" column="product_id"/>
            <result property="productName" column="product_name"/>
        </association>

        <!-- 상품 대표 이미지 -->
        <association property="imageDto" javaType="com.hollybam.hollybam.dto.ImageDto">
            <id property="imageCode" column="image_code"/>
            <result property="imageUrl" column="image_url"/>
            <result property="imageType" column="image_type"/>
        </association>

        <!-- 회원 정보 (nullable) -->
        <association property="memberDto" javaType="com.hollybam.hollybam.dto.MemberDto">
            <id property="memberCode" column="mem_code"/>
            <result property="memberName" column="mem_name"/>
            <result property="memberBirth" column="mem_birth"/>
            <result property="memberGender" column="mem_gender"/>
        </association>

        <!-- 비회원 정보 (nullable) -->
        <association property="guestDto" javaType="com.hollybam.hollybam.dto.GuestDto">
            <id property="guestCode" column="guest_code"/>
            <result property="guestName" column="guest_name"/>
            <result property="guestBirth" column="guest_birth"/>
            <result property="guestGender" column="guest_gender"/>
        </association>
    </resultMap>

    <!-- 베스트 리뷰 조회 쿼리 -->
    <select id="selectBestReviews" resultMap="BestReviewResultMap">
        SELECT
        r.review_code,
        r.mem_code,
        r.guest_code,
        r.order_item_code,
        r.rating,
        r.content,
        r.created_at,
        COALESCE(rl.like_count, 0) as like_count,

        oi.order_item_code,
        oi.order_code,
        oi.product_code,
        oi.create_at as order_create_at,

        p.product_code,
        p.product_id,
        p.product_name,

        img.image_code,
        img.image_url,
        'title' as image_type,

        m.mem_name,
        m.mem_birth,
        m.mem_gender,

        g.guest_name,
        g.guest_birth,
        g.guest_gender,

        <!-- 작성자 정보 통합 -->
        CASE
        WHEN r.mem_code IS NOT NULL THEN m.mem_name
        WHEN r.guest_code IS NOT NULL THEN g.guest_name
        ELSE NULL
        END as writer_name,

        CASE
        WHEN r.mem_code IS NOT NULL THEN m.mem_birth
        WHEN r.guest_code IS NOT NULL THEN g.guest_birth
        ELSE NULL
        END as writer_birth,

        CASE
        WHEN r.mem_code IS NOT NULL THEN 'member'
        WHEN r.guest_code IS NOT NULL THEN 'guest'
        ELSE 'unknown'
        END as writer_type

        FROM review r
        -- 리뷰별 좋아요 수 계산
        LEFT JOIN (
        SELECT
        review_code,
        COUNT(*) as like_count
        FROM review_like
        GROUP BY review_code
        ) rl ON r.review_code = rl.review_code
        -- 주문 아이템 정보
        INNER JOIN order_items oi ON r.order_item_code = oi.order_item_code
        -- 상품 정보
        INNER JOIN product p ON oi.product_code = p.product_code
        -- 상품 대표 이미지 (title 타입)
        LEFT JOIN image img ON p.product_code = img.product_code
        AND img.image_type = 'title'
        -- 회원 정보 (있는 경우)
        LEFT JOIN member m ON r.mem_code = m.mem_code
        -- 비회원 정보 (있는 경우)
        LEFT JOIN guest g ON r.guest_code = g.guest_code
        -- 리뷰가 활성화된 것만
        WHERE r.is_active = 1
        -- 좋아요 수 내림차순, 그 다음 리뷰 작성일 내림차순
        ORDER BY COALESCE(rl.like_count, 0) DESC, r.created_at DESC
        -- 베스트 리뷰 12개
        LIMIT 12
    </select>

    <!-- 특정 상품의 베스트 리뷰 조회 -->
    <select id="selectBestReviewsByProduct" parameterType="int" resultMap="BestReviewResultMap">
        <!-- 위 쿼리에 WHERE 조건 추가 -->
        SELECT
        r.review_code,
        r.mem_code,
        r.guest_code,
        r.order_item_code,
        r.rating,
        r.content,
        r.created_at,
        COALESCE(rl.like_count, 0) as like_count,

        oi.order_item_code,
        oi.order_code,
        oi.product_code,
        oi.create_at as order_create_at,

        p.product_code,
        p.product_id,
        p.product_name,

        img.image_code,
        img.image_url,
        'title' as image_type,

        m.mem_name,
        m.mem_birth,

        g.guest_name,
        g.guest_birth,

        CASE
        WHEN r.mem_code IS NOT NULL THEN m.mem_name
        WHEN r.guest_code IS NOT NULL THEN g.guest_name
        ELSE NULL
        END as writer_name,

        CASE
        WHEN r.mem_code IS NOT NULL THEN m.mem_birth
        WHEN r.guest_code IS NOT NULL THEN g.guest_birth
        ELSE NULL
        END as writer_birth,

        CASE
        WHEN r.mem_code IS NOT NULL THEN 'member'
        WHEN r.guest_code IS NOT NULL THEN 'guest'
        ELSE 'unknown'
        END as writer_type

        FROM review r
        LEFT JOIN (
        SELECT
        review_code,
        COUNT(*) as like_count
        FROM review_like
        GROUP BY review_code
        ) rl ON r.review_code = rl.review_code
        INNER JOIN order_items oi ON r.order_item_code = oi.order_item_code
        INNER JOIN product p ON oi.product_code = p.product_code
        LEFT JOIN image img ON p.product_code = img.product_code
        AND img.image_type = 'title'
        LEFT JOIN member m ON r.mem_code = m.mem_code
        LEFT JOIN guest g ON r.guest_code = g.guest_code
        WHERE r.is_active = 1
        AND p.product_code = #{productCode}
        ORDER BY COALESCE(rl.like_count, 0) DESC, r.created_at DESC
        LIMIT 12
    </select>

    <!-- 회원의 리뷰 통계 조회 -->
    <select id="selectMemberReviewStats" parameterType="int" resultType="map">
        SELECT
            COUNT(*) as totalReviews,
            COUNT(ri.review_code) as photoReviews,
            COUNT(*) - COUNT(ri.review_code) as textReviews,
            ROUND(SUM(r.rating) / COUNT(*), 2) AS avgRating
        FROM review r
                 LEFT JOIN review_image ri ON r.review_code = ri.review_code
        WHERE r.mem_code = #{memCode}
          AND r.is_active = 1
    </select>

    <!-- 비회원의 리뷰 통계 조회 -->
    <select id="selectGuestReviewStats" parameterType="int" resultType="map">
        SELECT
            COUNT(*) as totalReviews,
            COUNT(ri.review_code) as photoReviews,
            COUNT(*) - COUNT(ri.review_code) as textReviews,
            ROUND(SUM(r.rating) / COUNT(*), 2) AS avgRating
        FROM review r
                 LEFT JOIN review_image ri ON r.review_code = ri.review_code
        WHERE r.guest_code = #{guestCode}
          AND r.is_active = 1
    </select>

    <select id="getPhotoReviewDesc" resultType="map">
        SELECT
            r.review_code as reviewCode,
            r.mem_code as memberCode,
            r.guest_code as guestCode,
            r.rating as rating,
            r.content as content,
            r.created_at as reviewDate,
            CASE
                WHEN r.mem_code IS NOT NULL THEN CONCAT(LEFT(m.mem_name, 1), REPEAT('*', CHAR_LENGTH(m.mem_name) - 1))
                WHEN r.guest_code IS NOT NULL THEN CONCAT(LEFT(g.guest_name, 1), REPEAT('*', CHAR_LENGTH(g.guest_name) - 1))
                ELSE 'Unknown'
                END as writerName,
            p.product_name as productName,
            COALESCE(
                    (SELECT pi.image_url
                     FROM image pi
                     WHERE pi.product_code = p.product_code
                       AND pi.image_type = 'title'
                     ORDER BY pi.image_order ASC
                     LIMIT 1),
                    (SELECT pi.image_url
                     FROM image pi
                     WHERE pi.product_code = p.product_code
                     ORDER BY pi.image_order ASC, pi.create_at ASC
                     LIMIT 1)
            ) as productImage,
            (SELECT ri.image_url
             FROM review_image ri
             WHERE ri.review_code = r.review_code
             ORDER BY ri.created_at ASC
             LIMIT 1
            ) as reviewImage,
            COALESCE(like_counts.like_count, 0) as likeCount
        FROM review r
                 LEFT JOIN member m ON r.mem_code = m.mem_code
                 LEFT JOIN guest g ON r.guest_code = g.guest_code
                 INNER JOIN order_items oi ON r.order_item_code = oi.order_item_code
                 INNER JOIN product p ON oi.product_code = p.product_code
                 LEFT JOIN (
            SELECT
                rl.review_code,
                COUNT(*) as like_count
            FROM review_like rl
            GROUP BY rl.review_code
        ) like_counts ON r.review_code = like_counts.review_code
        WHERE r.is_active = 1
          AND EXISTS (
            SELECT 1
            FROM review_image ri
            WHERE ri.review_code = r.review_code
        )
        ORDER BY r.created_at DESC
    </select>

    <select id="getPhotoReviewRating" parameterType="map">
        SELECT
            r.review_code as reviewCode,
            r.mem_code as memberCode,
            r.guest_code as guestCode,
            r.rating as rating,
            r.content as content,
            r.created_at as reviewDate,
            CASE
                WHEN r.mem_code IS NOT NULL THEN CONCAT(LEFT(m.mem_name, 1), REPEAT('*', CHAR_LENGTH(m.mem_name) - 1))
                WHEN r.guest_code IS NOT NULL THEN CONCAT(LEFT(g.guest_name, 1), REPEAT('*', CHAR_LENGTH(g.guest_name) - 1))
                ELSE 'Unknown'
                END as writerName,
            p.product_name as productName,
            COALESCE(
                    (SELECT pi.image_url
                     FROM image pi
                     WHERE pi.product_code = p.product_code
                       AND pi.image_type = 'title'
                     ORDER BY pi.image_order ASC
                     LIMIT 1),
                    (SELECT pi.image_url
                     FROM image pi
                     WHERE pi.product_code = p.product_code
                     ORDER BY pi.image_order ASC, pi.create_at ASC
                     LIMIT 1)
            ) as productImage,
            (SELECT ri.image_url
             FROM review_image ri
             WHERE ri.review_code = r.review_code
             ORDER BY ri.created_at ASC
             LIMIT 1
            ) as reviewImage,
            COALESCE(like_counts.like_count, 0) as likeCount
        FROM review r
                 LEFT JOIN member m ON r.mem_code = m.mem_code
                 LEFT JOIN guest g ON r.guest_code = g.guest_code
                 INNER JOIN order_items oi ON r.order_item_code = oi.order_item_code
                 INNER JOIN product p ON oi.product_code = p.product_code
                 LEFT JOIN (
            SELECT
                rl.review_code,
                COUNT(*) as like_count
            FROM review_like rl
            GROUP BY rl.review_code
        ) like_counts ON r.review_code = like_counts.review_code
        WHERE r.is_active = 1
          AND EXISTS (
            SELECT 1
            FROM review_image ri
            WHERE ri.review_code = r.review_code
        )
        ORDER BY r.rating DESC, r.created_at DESC
    </select>

    <select id="getPhotoReviewLike" resultType="map">
        SELECT
            r.review_code as reviewCode,
            r.mem_code as memberCode,
            r.guest_code as guestCode,
            r.rating as rating,
            r.content as content,
            r.created_at as reviewDate,
            CASE
                WHEN r.mem_code IS NOT NULL THEN CONCAT(LEFT(m.mem_name, 1), REPEAT('*', CHAR_LENGTH(m.mem_name) - 1))
                WHEN r.guest_code IS NOT NULL THEN CONCAT(LEFT(g.guest_name, 1), REPEAT('*', CHAR_LENGTH(g.guest_name) - 1))
                ELSE 'Unknown'
                END as writerName,
            p.product_name as productName,
            COALESCE(
                    (SELECT pi.image_url
                     FROM image pi
                     WHERE pi.product_code = p.product_code
                       AND pi.image_type = 'title'
                     ORDER BY pi.image_order ASC
                     LIMIT 1),
                    (SELECT pi.image_url
                     FROM image pi
                     WHERE pi.product_code = p.product_code
                     ORDER BY pi.image_order ASC, pi.create_at ASC
                     LIMIT 1)
            ) as productImage,
            (SELECT ri.image_url
             FROM review_image ri
             WHERE ri.review_code = r.review_code
             ORDER BY ri.created_at ASC
             LIMIT 1
            ) as reviewImage,
            COALESCE(like_counts.like_count, 0) as likeCount
        FROM review r
                 LEFT JOIN member m ON r.mem_code = m.mem_code
                 LEFT JOIN guest g ON r.guest_code = g.guest_code
                 INNER JOIN order_items oi ON r.order_item_code = oi.order_item_code
                 INNER JOIN product p ON oi.product_code = p.product_code
                 LEFT JOIN (
            SELECT
                rl.review_code,
                COUNT(*) as like_count
            FROM review_like rl
            GROUP BY rl.review_code
        ) like_counts ON r.review_code = like_counts.review_code
        WHERE r.is_active = 1
          AND EXISTS (
            SELECT 1
            FROM review_image ri
            WHERE ri.review_code = r.review_code
        )
        ORDER BY COALESCE(like_counts.like_count, 0) DESC, r.created_at DESC
    </select>

    <select id="getReviewCount" parameterType="int" resultType="map">
        SELECT
            COUNT(ri.review_code) as photoReviews,
            COUNT(*) - COUNT(ri.review_code) as textReviews
        FROM review r
                 LEFT JOIN review_image ri ON r.review_code = ri.review_code
        WHERE r.is_active = 1
    </select>

</mapper>