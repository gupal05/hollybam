<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hollybam.hollybam.dao.IF_ReviewDao">

    <!-- ====== 기존 쿼리들 (그대로 유지) ====== -->

    <!-- 주문 상태 조회 -->
    <select id="getOrderStatusByOrderItemCode" resultType="String">
        SELECT o.order_status
        FROM orders o
                 JOIN order_items oi ON o.order_code = oi.order_code
        WHERE oi.order_item_code = #{orderItemCode}
    </select>

    <!-- 이미 리뷰가 작성되었는지 확인 -->
    <select id="countExistingReview" resultType="int">
        SELECT COUNT(*)
        FROM review
        WHERE order_item_code = #{orderItemCode}
          AND (
            (#{memCode} IS NOT NULL AND mem_code = #{memCode})
                OR
            (#{guestCode} IS NOT NULL AND guest_code = #{guestCode})
            )
    </select>

    <insert id="insertReview" parameterType="ReviewDto" useGeneratedKeys="true" keyProperty="reviewCode">
        INSERT INTO review (
            order_item_code,
            mem_code,
            guest_code,
            rating,
            content,
            is_active,
            created_at
        )
        VALUES (
                   #{orderItemCode},
                   #{memCode},
                   #{guestCode},
                   #{rating},
                   #{content},
                   1,
                   NOW()
               )
    </insert>

    <insert id="insertReviewImage" parameterType="ReviewImageDto">
        INSERT INTO review_image (
            review_code,
            image_url
        )
        VALUES (
                   #{reviewCode},
                   #{imageUrl}
               )
    </insert>

    <select id="isWroteReview" parameterType="int" resultType="int">
        select count(*)
        from review
        where order_item_code = #{orderItemCode}
    </select>

    <!-- 베스트 리뷰 조회용 ResultMap -->
    <resultMap id="BestReviewResultMap" type="com.hollybam.hollybam.dto.BestReviewDto">
        <!-- 리뷰 기본 정보 -->
        <id property="reviewCode" column="review_code"/>
        <result property="memCode" column="mem_code"/>
        <result property="guestCode" column="guest_code"/>
        <result property="orderItemCode" column="order_item_code"/>
        <result property="rating" column="rating"/>
        <result property="content" column="content"/>
        <result property="likeCount" column="like_count"/>
        <result property="createdAt" column="created_at"/>

        <!-- 작성자 정보 (플랫 구조) -->
        <result property="writerName" column="writer_name"/>
        <result property="writerBirth" column="writer_birth"/>
        <result property="writerType" column="writer_type"/>

        <!-- 주문 아이템 정보 -->
        <association property="orderItemDto" javaType="com.hollybam.hollybam.dto.OrderItemDto">
            <id property="orderItemCode" column="order_item_code"/>
            <result property="orderCode" column="order_code"/>
            <result property="productCode" column="product_code"/>
            <result property="createAt" column="order_create_at"/>
        </association>

        <!-- 상품 정보 -->
        <association property="productDto" javaType="com.hollybam.hollybam.dto.ProductDto">
            <id property="productCode" column="product_code"/>
            <result property="productId" column="product_id"/>
            <result property="productName" column="product_name"/>
        </association>

        <!-- 상품 대표 이미지 -->
        <association property="imageDto" javaType="com.hollybam.hollybam.dto.ImageDto">
            <id property="imageCode" column="image_code"/>
            <result property="imageUrl" column="image_url"/>
            <result property="imageType" column="image_type"/>
        </association>

        <!-- 회원 정보 (nullable) -->
        <association property="memberDto" javaType="com.hollybam.hollybam.dto.MemberDto">
            <id property="memberCode" column="mem_code"/>
            <result property="memberName" column="mem_name"/>
            <result property="memberBirth" column="mem_birth"/>
            <result property="memberGender" column="mem_gender"/>
        </association>

        <!-- 비회원 정보 (nullable) -->
        <association property="guestDto" javaType="com.hollybam.hollybam.dto.GuestDto">
            <id property="guestCode" column="guest_code"/>
            <result property="guestName" column="guest_name"/>
            <result property="guestBirth" column="guest_birth"/>
            <result property="guestGender" column="guest_gender"/>
        </association>
    </resultMap>

    <!-- 베스트 리뷰 조회 쿼리 -->
    <select id="selectBestReviews" resultMap="BestReviewResultMap">
        SELECT
        r.review_code,
        r.mem_code,
        r.guest_code,
        r.order_item_code,
        r.rating,
        r.content,
        r.created_at,
        COALESCE(rl.like_count, 0) as like_count,

        oi.order_item_code,
        oi.order_code,
        oi.product_code,
        oi.create_at as order_create_at,

        p.product_code,
        p.product_id,
        p.product_name,

        img.image_code,
        img.image_url,
        'title' as image_type,

        m.mem_name,
        m.mem_birth,
        m.mem_gender,

        g.guest_name,
        g.guest_birth,
        g.guest_gender,

        <!-- 작성자 정보 통합 -->
        CASE
        WHEN r.mem_code IS NOT NULL THEN m.mem_name
        WHEN r.guest_code IS NOT NULL THEN g.guest_name
        ELSE NULL
        END as writer_name,

        CASE
        WHEN r.mem_code IS NOT NULL THEN m.mem_birth
        WHEN r.guest_code IS NOT NULL THEN g.guest_birth
        ELSE NULL
        END as writer_birth,

        CASE
        WHEN r.mem_code IS NOT NULL THEN 'member'
        WHEN r.guest_code IS NOT NULL THEN 'guest'
        ELSE 'unknown'
        END as writer_type

        FROM review r
        -- 리뷰별 좋아요 수 계산
        LEFT JOIN (
        SELECT
        review_code,
        COUNT(*) as like_count
        FROM review_like
        GROUP BY review_code
        ) rl ON r.review_code = rl.review_code
        -- 주문 아이템 정보
        INNER JOIN order_items oi ON r.order_item_code = oi.order_item_code
        -- 상품 정보
        INNER JOIN product p ON oi.product_code = p.product_code
        -- 상품 대표 이미지 (title 타입)
        LEFT JOIN image img ON p.product_code = img.product_code
        AND img.image_type = 'title'
        -- 회원 정보 (있는 경우)
        LEFT JOIN member m ON r.mem_code = m.mem_code
        -- 비회원 정보 (있는 경우)
        LEFT JOIN guest g ON r.guest_code = g.guest_code
        -- 리뷰가 활성화된 것만
        WHERE r.is_active = 1
        -- 좋아요 수 내림차순, 그 다음 리뷰 작성일 내림차순
        ORDER BY COALESCE(rl.like_count, 0) DESC, r.created_at DESC
        -- 베스트 리뷰 12개
        LIMIT 12
    </select>

    <!-- 특정 상품의 베스트 리뷰 조회 -->
    <select id="selectBestReviewsByProduct" parameterType="int" resultMap="BestReviewResultMap">
        SELECT
            r.review_code,
            r.mem_code,
            r.guest_code,
            r.order_item_code,
            r.rating,
            r.content,
            r.created_at,
            COALESCE(rl.like_count, 0) as like_count,

            oi.order_item_code,
            oi.order_code,
            oi.product_code,
            oi.create_at as order_create_at,

            p.product_code,
            p.product_id,
            p.product_name,

            img.image_code,
            img.image_url,
            'title' as image_type,

            m.mem_name,
            m.mem_birth,

            g.guest_name,
            g.guest_birth,

            CASE
                WHEN r.mem_code IS NOT NULL THEN m.mem_name
                WHEN r.guest_code IS NOT NULL THEN g.guest_name
                ELSE NULL
                END as writer_name,

            CASE
                WHEN r.mem_code IS NOT NULL THEN m.mem_birth
                WHEN r.guest_code IS NOT NULL THEN g.guest_birth
                ELSE NULL
                END as writer_birth,

            CASE
                WHEN r.mem_code IS NOT NULL THEN 'member'
                WHEN r.guest_code IS NOT NULL THEN 'guest'
                ELSE 'unknown'
                END as writer_type

        FROM review r
                 LEFT JOIN (
            SELECT
                review_code,
                COUNT(*) as like_count
            FROM review_like
            GROUP BY review_code
        ) rl ON r.review_code = rl.review_code
                 INNER JOIN order_items oi ON r.order_item_code = oi.order_item_code
                 INNER JOIN product p ON oi.product_code = p.product_code
                 LEFT JOIN image img ON p.product_code = img.product_code
            AND img.image_type = 'title'
                 LEFT JOIN member m ON r.mem_code = m.mem_code
                 LEFT JOIN guest g ON r.guest_code = g.guest_code
        WHERE r.is_active = 1
          AND p.product_code = #{productCode}
        ORDER BY COALESCE(rl.like_count, 0) DESC, r.created_at DESC
        LIMIT 12
    </select>

    <!-- 회원의 리뷰 통계 조회 -->
    <select id="selectMemberReviewStats" parameterType="int" resultType="map">
        SELECT
            COUNT(*) as totalReviews,
            COUNT(ri.review_code) as photoReviews,
            COUNT(*) - COUNT(ri.review_code) as textReviews,
            ROUND(SUM(r.rating) / COUNT(*), 2) AS avgRating
        FROM review r
                 LEFT JOIN review_image ri ON r.review_code = ri.review_code
        WHERE r.mem_code = #{memCode}
          AND r.is_active = 1
    </select>

    <!-- 비회원의 리뷰 통계 조회 -->
    <select id="selectGuestReviewStats" parameterType="int" resultType="map">
        SELECT
            COUNT(*) as totalReviews,
            COUNT(ri.review_code) as photoReviews,
            COUNT(*) - COUNT(ri.review_code) as textReviews,
            ROUND(SUM(r.rating) / COUNT(*), 2) AS avgRating
        FROM review r
                 LEFT JOIN review_image ri ON r.review_code = ri.review_code
        WHERE r.guest_code = #{guestCode}
          AND r.is_active = 1
    </select>

    <!-- ====== 기존 포토리뷰 쿼리들 (하위 호환성 유지) ====== -->

    <!-- 포토리뷰 최신순 조회 (기존 메서드) -->
    <select id="getPhotoReviewDesc" resultType="map">
        SELECT DISTINCT
            r.review_code,
            r.mem_code as memberCode,
            r.guest_code as guestCode,
            r.rating,
            r.content,
            r.created_at as reviewDate,
            p.product_name as productName,
            img.image_url as productImage,
            ri.image_url as reviewImage,
            COALESCE(rl.like_count, 0) as likeCount,
            CASE
                WHEN r.mem_code IS NOT NULL THEN m.mem_name
                WHEN r.guest_code IS NOT NULL THEN g.guest_name
                ELSE 'Unknown'
                END as writerName
        FROM review r
                 INNER JOIN review_image ri ON r.review_code = ri.review_code
                 INNER JOIN order_items oi ON r.order_item_code = oi.order_item_code
                 INNER JOIN product p ON oi.product_code = p.product_code
                 LEFT JOIN image img ON p.product_code = img.product_code AND img.image_type = 'title'
                 LEFT JOIN member m ON r.mem_code = m.mem_code
                 LEFT JOIN guest g ON r.guest_code = g.guest_code
                 LEFT JOIN (
            SELECT review_code, COUNT(*) as like_count
            FROM review_like
            GROUP BY review_code
        ) rl ON r.review_code = rl.review_code
        WHERE r.is_active = 1
        ORDER BY r.created_at DESC
        LIMIT 50
    </select>

    <!-- 포토리뷰 평점순 조회 (기존 메서드) -->
    <select id="getPhotoReviewRating" resultType="map">
        SELECT DISTINCT
            r.review_code,
            r.mem_code as memberCode,
            r.guest_code as guestCode,
            r.rating,
            r.content,
            r.created_at as reviewDate,
            p.product_name as productName,
            img.image_url as productImage,
            ri.image_url as reviewImage,
            COALESCE(rl.like_count, 0) as likeCount,
            CASE
                WHEN r.mem_code IS NOT NULL THEN m.mem_name
                WHEN r.guest_code IS NOT NULL THEN g.guest_name
                ELSE 'Unknown'
                END as writerName
        FROM review r
                 INNER JOIN review_image ri ON r.review_code = ri.review_code
                 INNER JOIN order_items oi ON r.order_item_code = oi.order_item_code
                 INNER JOIN product p ON oi.product_code = p.product_code
                 LEFT JOIN image img ON p.product_code = img.product_code AND img.image_type = 'title'
                 LEFT JOIN member m ON r.mem_code = m.mem_code
                 LEFT JOIN guest g ON r.guest_code = g.guest_code
                 LEFT JOIN (
            SELECT review_code, COUNT(*) as like_count
            FROM review_like
            GROUP BY review_code
        ) rl ON r.review_code = rl.review_code
        WHERE r.is_active = 1
        ORDER BY r.rating DESC, r.created_at DESC
        LIMIT 50
    </select>

    <!-- 포토리뷰 좋아요순 조회 (기존 메서드) -->
    <select id="getPhotoReviewLike" resultType="map">
        SELECT DISTINCT
            r.review_code,
            r.mem_code as memberCode,
            r.guest_code as guestCode,
            r.rating,
            r.content,
            r.created_at as reviewDate,
            p.product_name as productName,
            img.image_url as productImage,
            ri.image_url as reviewImage,
            COALESCE(rl.like_count, 0) as likeCount,
            CASE
                WHEN r.mem_code IS NOT NULL THEN m.mem_name
                WHEN r.guest_code IS NOT NULL THEN g.guest_name
                ELSE 'Unknown'
                END as writerName
        FROM review r
                 INNER JOIN review_image ri ON r.review_code = ri.review_code
                 INNER JOIN order_items oi ON r.order_item_code = oi.order_item_code
                 INNER JOIN product p ON oi.product_code = p.product_code
                 LEFT JOIN image img ON p.product_code = img.product_code AND img.image_type = 'title'
                 LEFT JOIN member m ON r.mem_code = m.mem_code
                 LEFT JOIN guest g ON r.guest_code = g.guest_code
                 LEFT JOIN (
            SELECT review_code, COUNT(*) as like_count
            FROM review_like
            GROUP BY review_code
        ) rl ON r.review_code = rl.review_code
        WHERE r.is_active = 1
        ORDER BY COALESCE(rl.like_count, 0) DESC, r.created_at DESC
        LIMIT 50
    </select>

    <!-- 리뷰 카운트 조회 (기존 메서드) -->
    <select id="getReviewCount" resultType="map">
        SELECT
            (SELECT COUNT(DISTINCT r.review_code)
             FROM review r
                      INNER JOIN review_image ri ON r.review_code = ri.review_code
             WHERE r.is_active = 1) as photoReviews,
            (SELECT COUNT(*)
             FROM review r
             WHERE r.is_active = 1
               AND r.review_code NOT IN (
                 SELECT DISTINCT review_code FROM review_image
             )) as textReviews
    </select>

    <!-- ====== 새로 추가된 텍스트리뷰 쿼리들 ====== -->

    <!-- 텍스트리뷰 최신순 조회 -->
    <select id="getTextReviewDesc" resultType="map">
        SELECT
            r.review_code,
            r.mem_code as memberCode,
            r.guest_code as guestCode,
            r.rating,
            r.content,
            r.created_at as reviewDate,
            p.product_name as productName,
            img.image_url as productImage,
            COALESCE(rl.like_count, 0) as likeCount,
            CASE
                WHEN r.mem_code IS NOT NULL THEN m.mem_name
                WHEN r.guest_code IS NOT NULL THEN g.guest_name
                ELSE 'Unknown'
                END as writerName
        FROM review r
                 INNER JOIN order_items oi ON r.order_item_code = oi.order_item_code
                 INNER JOIN product p ON oi.product_code = p.product_code
                 LEFT JOIN image img ON p.product_code = img.product_code AND img.image_type = 'title'
                 LEFT JOIN member m ON r.mem_code = m.mem_code
                 LEFT JOIN guest g ON r.guest_code = g.guest_code
                 LEFT JOIN (
            SELECT review_code, COUNT(*) as like_count
            FROM review_like
            GROUP BY review_code
        ) rl ON r.review_code = rl.review_code
        WHERE r.is_active = 1
          AND r.review_code NOT IN (
            SELECT DISTINCT review_code FROM review_image
        )
        ORDER BY r.created_at DESC
        LIMIT 50
    </select>

    <!-- 텍스트리뷰 평점순 조회 -->
    <select id="getTextReviewRating" resultType="map">
        SELECT
            r.review_code,
            r.mem_code as memberCode,
            r.guest_code as guestCode,
            r.rating,
            r.content,
            r.created_at as reviewDate,
            p.product_name as productName,
            img.image_url as productImage,
            COALESCE(rl.like_count, 0) as likeCount,
            CASE
                WHEN r.mem_code IS NOT NULL THEN m.mem_name
                WHEN r.guest_code IS NOT NULL THEN g.guest_name
                ELSE 'Unknown'
                END as writerName
        FROM review r
                 INNER JOIN order_items oi ON r.order_item_code = oi.order_item_code
                 INNER JOIN product p ON oi.product_code = p.product_code
                 LEFT JOIN image img ON p.product_code = img.product_code AND img.image_type = 'title'
                 LEFT JOIN member m ON r.mem_code = m.mem_code
                 LEFT JOIN guest g ON r.guest_code = g.guest_code
                 LEFT JOIN (
            SELECT review_code, COUNT(*) as like_count
            FROM review_like
            GROUP BY review_code
        ) rl ON r.review_code = rl.review_code
        WHERE r.is_active = 1
          AND r.review_code NOT IN (
            SELECT DISTINCT review_code FROM review_image
        )
        ORDER BY r.rating DESC, r.created_at DESC
        LIMIT 50
    </select>

    <!-- 텍스트리뷰 좋아요순 조회 -->
    <select id="getTextReviewLike" resultType="map">
        SELECT
            r.review_code,
            r.mem_code as memberCode,
            r.guest_code as guestCode,
            r.rating,
            r.content,
            r.created_at as reviewDate,
            p.product_name as productName,
            img.image_url as productImage,
            COALESCE(rl.like_count, 0) as likeCount,
            CASE
                WHEN r.mem_code IS NOT NULL THEN m.mem_name
                WHEN r.guest_code IS NOT NULL THEN g.guest_name
                ELSE 'Unknown'
                END as writerName
        FROM review r
                 INNER JOIN order_items oi ON r.order_item_code = oi.order_item_code
                 INNER JOIN product p ON oi.product_code = p.product_code
                 LEFT JOIN image img ON p.product_code = img.product_code AND img.image_type = 'title'
                 LEFT JOIN member m ON r.mem_code = m.mem_code
                 LEFT JOIN guest g ON r.guest_code = g.guest_code
                 LEFT JOIN (
            SELECT review_code, COUNT(*) as like_count
            FROM review_like
            GROUP BY review_code
        ) rl ON r.review_code = rl.review_code
        WHERE r.is_active = 1
          AND r.review_code NOT IN (
            SELECT DISTINCT review_code FROM review_image
        )
        ORDER BY COALESCE(rl.like_count, 0) DESC, r.created_at DESC
        LIMIT 50
    </select>

    <!-- ====== 페이지네이션 및 필터링이 적용된 쿼리들 ====== -->

    <!-- 포토리뷰 최신순 조회 (페이지네이션 + 필터링 + 좋아요 상태) -->
    <select id="getPhotoReviewDescWithPaging" resultType="map">
        SELECT DISTINCT
        r.review_code,
        r.mem_code as memberCode,
        r.guest_code as guestCode,
        r.rating,
        r.content,
        r.created_at as reviewDate,
        p.product_name as productName,
        img.image_url as productImage,
        ri.image_url as reviewImage,
        COALESCE(rl.like_count, 0) as likeCount,
        CASE
        WHEN r.mem_code IS NOT NULL THEN m.mem_name
        WHEN r.guest_code IS NOT NULL THEN g.guest_name
        ELSE 'Unknown'
        END as writerName,
        CASE
        WHEN user_likes.review_code IS NOT NULL THEN 1
        ELSE 0
        END as isLiked
        FROM review r
        INNER JOIN review_image ri ON r.review_code = ri.review_code
        INNER JOIN order_items oi ON r.order_item_code = oi.order_item_code
        INNER JOIN product p ON oi.product_code = p.product_code
        LEFT JOIN image img ON p.product_code = img.product_code AND img.image_type = 'title'
        LEFT JOIN member m ON r.mem_code = m.mem_code
        LEFT JOIN guest g ON r.guest_code = g.guest_code
        LEFT JOIN (
        SELECT review_code, COUNT(*) as like_count
        FROM review_like
        GROUP BY review_code
        ) rl ON r.review_code = rl.review_code
        LEFT JOIN review_like user_likes ON r.review_code = user_likes.review_code
        AND (
        (#{memCode} IS NOT NULL AND user_likes.mem_code = #{memCode})
        OR
        (#{guestCode} IS NOT NULL AND user_likes.guest_code = #{guestCode})
        )
        WHERE r.is_active = 1
        <if test="rating != null">
            <choose>
                <when test="rating == 5">AND r.rating = 5</when>
                <when test="rating == 4">AND r.rating = 4</when>
                <when test="rating == 3">AND r.rating &lt;= 3</when>
            </choose>
        </if>
        ORDER BY r.created_at DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 포토리뷰 평점순 조회 (페이지네이션 + 필터링 + 좋아요 상태) -->
    <select id="getPhotoReviewRatingWithPaging" resultType="map">
        SELECT DISTINCT
        r.review_code,
        r.mem_code as memberCode,
        r.guest_code as guestCode,
        r.rating,
        r.content,
        r.created_at as reviewDate,
        p.product_name as productName,
        img.image_url as productImage,
        ri.image_url as reviewImage,
        COALESCE(rl.like_count, 0) as likeCount,
        CASE
        WHEN r.mem_code IS NOT NULL THEN m.mem_name
        WHEN r.guest_code IS NOT NULL THEN g.guest_name
        ELSE 'Unknown'
        END as writerName,
        CASE
        WHEN user_likes.review_code IS NOT NULL THEN 1
        ELSE 0
        END as isLiked
        FROM review r
        INNER JOIN review_image ri ON r.review_code = ri.review_code
        INNER JOIN order_items oi ON r.order_item_code = oi.order_item_code
        INNER JOIN product p ON oi.product_code = p.product_code
        LEFT JOIN image img ON p.product_code = img.product_code AND img.image_type = 'title'
        LEFT JOIN member m ON r.mem_code = m.mem_code
        LEFT JOIN guest g ON r.guest_code = g.guest_code
        LEFT JOIN (
        SELECT review_code, COUNT(*) as like_count
        FROM review_like
        GROUP BY review_code
        ) rl ON r.review_code = rl.review_code
        LEFT JOIN review_like user_likes ON r.review_code = user_likes.review_code
        AND (
        (#{memCode} IS NOT NULL AND user_likes.mem_code = #{memCode})
        OR
        (#{guestCode} IS NOT NULL AND user_likes.guest_code = #{guestCode})
        )
        WHERE r.is_active = 1
        <if test="rating != null">
            <choose>
                <when test="rating == 5">AND r.rating = 5</when>
                <when test="rating == 4">AND r.rating = 4</when>
                <when test="rating == 3">AND r.rating &lt;= 3</when>
            </choose>
        </if>
        ORDER BY r.rating DESC, r.created_at DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 포토리뷰 좋아요순 조회 (페이지네이션 + 필터링 + 좋아요 상태) -->
    <select id="getPhotoReviewLikeWithPaging" resultType="map">
        SELECT DISTINCT
        r.review_code,
        r.mem_code as memberCode,
        r.guest_code as guestCode,
        r.rating,
        r.content,
        r.created_at as reviewDate,
        p.product_name as productName,
        img.image_url as productImage,
        ri.image_url as reviewImage,
        COALESCE(rl.like_count, 0) as likeCount,
        CASE
        WHEN r.mem_code IS NOT NULL THEN m.mem_name
        WHEN r.guest_code IS NOT NULL THEN g.guest_name
        ELSE 'Unknown'
        END as writerName,
        CASE
        WHEN user_likes.review_code IS NOT NULL THEN 1
        ELSE 0
        END as isLiked
        FROM review r
        INNER JOIN review_image ri ON r.review_code = ri.review_code
        INNER JOIN order_items oi ON r.order_item_code = oi.order_item_code
        INNER JOIN product p ON oi.product_code = p.product_code
        LEFT JOIN image img ON p.product_code = img.product_code AND img.image_type = 'title'
        LEFT JOIN member m ON r.mem_code = m.mem_code
        LEFT JOIN guest g ON r.guest_code = g.guest_code
        LEFT JOIN (
        SELECT review_code, COUNT(*) as like_count
        FROM review_like
        GROUP BY review_code
        ) rl ON r.review_code = rl.review_code
        LEFT JOIN review_like user_likes ON r.review_code = user_likes.review_code
        AND (
        (#{memCode} IS NOT NULL AND user_likes.mem_code = #{memCode})
        OR
        (#{guestCode} IS NOT NULL AND user_likes.guest_code = #{guestCode})
        )
        WHERE r.is_active = 1
        <if test="rating != null">
            <choose>
                <when test="rating == 5">AND r.rating = 5</when>
                <when test="rating == 4">AND r.rating = 4</when>
                <when test="rating == 3">AND r.rating &lt;= 3</when>
            </choose>
        </if>
        ORDER BY COALESCE(rl.like_count, 0) DESC, r.created_at DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 텍스트리뷰 최신순 조회 (페이지네이션 + 필터링 + 좋아요 상태) -->
    <select id="getTextReviewDescWithPaging" resultType="map">
        SELECT
        r.review_code,
        r.mem_code as memberCode,
        r.guest_code as guestCode,
        r.rating,
        r.content,
        r.created_at as reviewDate,
        p.product_name as productName,
        img.image_url as productImage,
        COALESCE(rl.like_count, 0) as likeCount,
        CASE
        WHEN r.mem_code IS NOT NULL THEN m.mem_name
        WHEN r.guest_code IS NOT NULL THEN g.guest_name
        ELSE 'Unknown'
        END as writerName,
        CASE
        WHEN user_likes.review_code IS NOT NULL THEN 1
        ELSE 0
        END as isLiked
        FROM review r
        INNER JOIN order_items oi ON r.order_item_code = oi.order_item_code
        INNER JOIN product p ON oi.product_code = p.product_code
        LEFT JOIN image img ON p.product_code = img.product_code AND img.image_type = 'title'
        LEFT JOIN member m ON r.mem_code = m.mem_code
        LEFT JOIN guest g ON r.guest_code = g.guest_code
        LEFT JOIN (
        SELECT review_code, COUNT(*) as like_count
        FROM review_like
        GROUP BY review_code
        ) rl ON r.review_code = rl.review_code
        LEFT JOIN review_like user_likes ON r.review_code = user_likes.review_code
        AND (
        (#{memCode} IS NOT NULL AND user_likes.mem_code = #{memCode})
        OR
        (#{guestCode} IS NOT NULL AND user_likes.guest_code = #{guestCode})
        )
        WHERE r.is_active = 1
        AND r.review_code NOT IN (
        SELECT DISTINCT review_code FROM review_image
        )
        <if test="rating != null">
            <choose>
                <when test="rating == 5">AND r.rating = 5</when>
                <when test="rating == 4">AND r.rating = 4</when>
                <when test="rating == 3">AND r.rating &lt;= 3</when>
            </choose>
        </if>
        ORDER BY r.created_at DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 텍스트리뷰 평점순 조회 (페이지네이션 + 필터링 + 좋아요 상태) -->
    <select id="getTextReviewRatingWithPaging" resultType="map">
        SELECT
        r.review_code,
        r.mem_code as memberCode,
        r.guest_code as guestCode,
        r.rating,
        r.content,
        r.created_at as reviewDate,
        p.product_name as productName,
        img.image_url as productImage,
        COALESCE(rl.like_count, 0) as likeCount,
        CASE
        WHEN r.mem_code IS NOT NULL THEN m.mem_name
        WHEN r.guest_code IS NOT NULL THEN g.guest_name
        ELSE 'Unknown'
        END as writerName,
        CASE
        WHEN user_likes.review_code IS NOT NULL THEN 1
        ELSE 0
        END as isLiked
        FROM review r
        INNER JOIN order_items oi ON r.order_item_code = oi.order_item_code
        INNER JOIN product p ON oi.product_code = p.product_code
        LEFT JOIN image img ON p.product_code = img.product_code AND img.image_type = 'title'
        LEFT JOIN member m ON r.mem_code = m.mem_code
        LEFT JOIN guest g ON r.guest_code = g.guest_code
        LEFT JOIN (
        SELECT review_code, COUNT(*) as like_count
        FROM review_like
        GROUP BY review_code
        ) rl ON r.review_code = rl.review_code
        LEFT JOIN review_like user_likes ON r.review_code = user_likes.review_code
        AND (
        (#{memCode} IS NOT NULL AND user_likes.mem_code = #{memCode})
        OR
        (#{guestCode} IS NOT NULL AND user_likes.guest_code = #{guestCode})
        )
        WHERE r.is_active = 1
        AND r.review_code NOT IN (
        SELECT DISTINCT review_code FROM review_image
        )
        <if test="rating != null">
            <choose>
                <when test="rating == 5">AND r.rating = 5</when>
                <when test="rating == 4">AND r.rating = 4</when>
                <when test="rating == 3">AND r.rating &lt;= 3</when>
            </choose>
        </if>
        ORDER BY r.rating DESC, r.created_at DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 텍스트리뷰 좋아요순 조회 (페이지네이션 + 필터링 + 좋아요 상태) -->
    <select id="getTextReviewLikeWithPaging" resultType="map">
        SELECT
        r.review_code,
        r.mem_code as memberCode,
        r.guest_code as guestCode,
        r.rating,
        r.content,
        r.created_at as reviewDate,
        p.product_name as productName,
        img.image_url as productImage,
        COALESCE(rl.like_count, 0) as likeCount,
        CASE
        WHEN r.mem_code IS NOT NULL THEN m.mem_name
        WHEN r.guest_code IS NOT NULL THEN g.guest_name
        ELSE 'Unknown'
        END as writerName,
        CASE
        WHEN user_likes.review_code IS NOT NULL THEN 1
        ELSE 0
        END as isLiked
        FROM review r
        INNER JOIN order_items oi ON r.order_item_code = oi.order_item_code
        INNER JOIN product p ON oi.product_code = p.product_code
        LEFT JOIN image img ON p.product_code = img.product_code AND img.image_type = 'title'
        LEFT JOIN member m ON r.mem_code = m.mem_code
        LEFT JOIN guest g ON r.guest_code = g.guest_code
        LEFT JOIN (
        SELECT review_code, COUNT(*) as like_count
        FROM review_like
        GROUP BY review_code
        ) rl ON r.review_code = rl.review_code
        LEFT JOIN review_like user_likes ON r.review_code = user_likes.review_code
        AND (
        (#{memCode} IS NOT NULL AND user_likes.mem_code = #{memCode})
        OR
        (#{guestCode} IS NOT NULL AND user_likes.guest_code = #{guestCode})
        )
        WHERE r.is_active = 1
        AND r.review_code NOT IN (
        SELECT DISTINCT review_code FROM review_image
        )
        <if test="rating != null">
            <choose>
                <when test="rating == 5">AND r.rating = 5</when>
                <when test="rating == 4">AND r.rating = 4</when>
                <when test="rating == 3">AND r.rating &lt;= 3</when>
            </choose>
        </if>
        ORDER BY COALESCE(rl.like_count, 0) DESC, r.created_at DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 리뷰 카운트 조회 (필터링 적용) -->
    <select id="getReviewCountWithFilter" resultType="map">
        SELECT
        (SELECT COUNT(DISTINCT r.review_code)
        FROM review r
        INNER JOIN review_image ri ON r.review_code = ri.review_code
        WHERE r.is_active = 1
        <if test="rating != null">
            <choose>
                <when test="rating == 5">AND r.rating = 5</when>
                <when test="rating == 4">AND r.rating = 4</when>
                <when test="rating == 3">AND r.rating &lt;= 3</when>
            </choose>
        </if>
        ) as photoReviews,
        (SELECT COUNT(*)
        FROM review r
        WHERE r.is_active = 1
        AND r.review_code NOT IN (
        SELECT DISTINCT review_code FROM review_image
        )
        <if test="rating != null">
            <choose>
                <when test="rating == 5">AND r.rating = 5</when>
                <when test="rating == 4">AND r.rating = 4</when>
                <when test="rating == 3">AND r.rating &lt;= 3</when>
            </choose>
        </if>
        ) as textReviews
    </select>

    <!-- ====== 좋아요 관련 쿼리들 ====== -->

    <!-- 좋아요 추가 -->
    <insert id="insertReviewLike">
        INSERT INTO review_like (review_code, mem_code, guest_code, created_at)
        VALUES (#{reviewCode}, #{memCode}, #{guestCode}, NOW())
    </insert>

    <!-- 좋아요 삭제 -->
    <delete id="deleteReviewLike">
        DELETE FROM review_like
        WHERE review_code = #{reviewCode}
          AND (
            (#{memCode} IS NOT NULL AND mem_code = #{memCode})
                OR
            (#{guestCode} IS NOT NULL AND guest_code = #{guestCode})
            )
    </delete>

    <!-- 사용자의 좋아요 상태 확인 -->
    <select id="checkUserLikeStatus" resultType="int">
        SELECT COUNT(*)
        FROM review_like
        WHERE review_code = #{reviewCode}
          AND (
            (#{memCode} IS NOT NULL AND mem_code = #{memCode})
                OR
            (#{guestCode} IS NOT NULL AND guest_code = #{guestCode})
            )
    </select>

    <!-- 사용자가 좋아요한 리뷰 목록 조회 -->
    <select id="getUserLikedReviews" resultType="int">
        SELECT review_code
        FROM review_like
        WHERE review_code IN
        <foreach collection="reviewCodes" item="reviewCode" open="(" separator="," close=")">
            #{reviewCode}
        </foreach>
        AND (
        (#{memCode} IS NOT NULL AND mem_code = #{memCode})
        OR
        (#{guestCode} IS NOT NULL AND guest_code = #{guestCode})
        )
    </select>

</mapper>