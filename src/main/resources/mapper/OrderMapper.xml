<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.hollybam.hollybam.dao.IF_OrderDao">

    <!-- OrderDto ResultMap -->
    <resultMap id="OrderResultMap" type="com.hollybam.hollybam.dto.OrderDto">
        <id property="orderCode" column="order_code" />
        <result property="orderId" column="order_id" />
        <result property="memCode" column="mem_code" />
        <result property="guestCode" column="guest_code" />
        <result property="ordererName" column="orderer_name" />
        <result property="ordererPhone" column="orderer_phone" />
        <result property="ordererEmail" column="orderer_email" />
        <result property="receiverName" column="receiver_name" />
        <result property="receiverPhone" column="receiver_phone" />
        <result property="receiverZip" column="receiver_zip" />
        <result property="receiverAddr" column="receiver_addr" />
        <result property="receiverAddrDetail" column="receiver_addr_detail" />
        <result property="deliveryRequest" column="delivery_request" />
        <result property="paymentMethod" column="payment_method" />
        <result property="totalAmount" column="total_amount" />
        <result property="discountAmount" column="discount_amount" />
        <result property="deliveryFee" column="delivery_fee" />
        <result property="finalAmount" column="final_amount" />
        <result property="pgProvider" column="pg_provider" />
        <result property="pgTid" column="pg_tid" />
        <result property="orderStatus" column="order_status" />
        <result property="paymentStatus" column="payment_status" />
        <result property="adultVerified" column="adult_verified" />
        <result property="adultVerifiedAt" column="adult_verified_at" />
        <result property="createAt" column="create_at" />
        <result property="updateAt" column="update_at" />
        <result property="usePoint" column="use_point_amount"/>
    </resultMap>

    <!-- 주문 등록 -->
    <insert id="insertOrder" parameterType="com.hollybam.hollybam.dto.OrderDto"
            useGeneratedKeys="true" keyProperty="orderCode">
        INSERT INTO orders (
            order_id, mem_code, guest_code, orderer_name, orderer_phone, orderer_email,
            receiver_name, receiver_phone, receiver_zip, receiver_addr, receiver_addr_detail,
            delivery_request, payment_method, total_amount, discount_amount, delivery_fee,
            final_amount, payment_status, adult_verified, adult_verified_at, depositor_name
        ) VALUES (
                     CONCAT(#{orderId}, '_', #{memberCode}),
                     #{memCode}, #{guestCode}, #{ordererName}, #{ordererPhone}, #{ordererEmail},
                     #{receiverName}, #{receiverPhone}, #{receiverZip}, #{receiverAddr}, #{receiverAddrDetail},
                     #{deliveryRequest}, #{paymentMethod}, #{totalAmount}, #{discountAmount}, #{deliveryFee},
                     #{finalAmount}, #{paymentStatus}, #{adultVerified}, #{adultVerifiedAt}, #{depositorName}
                 )
    </insert>

    <!-- 주문 상품 등록 -->
    <insert id="insertOrderItems" parameterType="java.util.List">
        INSERT INTO order_items (
        order_code, product_code, option_code, quantity, unit_price, option_price, total_price
        ) VALUES
        <foreach collection="orderItems" item="item" separator=",">
            (#{item.orderCode}, #{item.productCode}, #{item.optionCode}, #{item.quantity}, #{item.unitPrice}, #{item.optionPrice}, #{item.totalPrice})
        </foreach>
    </insert>

    <update id="updateOrderCount" parameterType="com.hollybam.hollybam.dto.OrderItemDto">
            UPDATE product
            SET product_order_count = product_order_count + #{quantity}
            WHERE product_code = #{productCode}
    </update>

    <!-- 배송 정보 등록 -->
    <insert id="insertDelivery" parameterType="com.hollybam.hollybam.dto.DeliveryDto">
        INSERT INTO delivery (order_code, delivery_status)
        VALUES (#{orderCode}, #{deliveryStatus})
    </insert>

    <!-- 주문 상세 조회 -->
    <select id="selectOrderByOrderId" resultMap="OrderResultMap">
        SELECT
            o.order_code,
            o.order_id,
            o.mem_code,
            o.guest_code,
            o.orderer_name,
            o.orderer_phone,
            o.orderer_email,
            o.receiver_name,
            o.receiver_phone,
            o.receiver_zip,
            o.receiver_addr,
            o.receiver_addr_detail,
            o.delivery_request,
            o.payment_method,
            o.total_amount,
            o.discount_amount,
            o.delivery_fee,
            o.final_amount,
            o.order_status,
            o.payment_status,
            o.adult_verified,
            o.adult_verified_at,
            o.create_at,
            o.update_at,
            o.depositor_name,
            -- 사용된 적립금 포인트(음수 합계를 ABS()로 양수 변환, 없으면 0)
            COALESCE(
                    ABS(
                            (
                                SELECT SUM(p.point_change)
                                FROM point p
                                WHERE p.related_order_code = o.order_code
                                  AND p.point_type = 'USE'
                            )
                    )
                , 0) AS used_point_amount
        FROM orders o
        WHERE o.order_id = #{orderId}
    </select>

    <!-- 회원 주문 목록 조회 -->
    <select id="selectOrdersByMemberCode" resultType="com.hollybam.hollybam.dto.OrderDto">
        SELECT order_code as orderCode, order_id as orderId, mem_code as memCode,
               orderer_name as ordererName, receiver_name as receiverName,
               total_amount as totalAmount, final_amount as finalAmount,
               order_status as orderStatus, payment_status as paymentStatus,
               create_at as createAt, update_at as updateAt
        FROM orders
        WHERE mem_code = #{memCode}
        ORDER BY create_at DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 비회원 주문 목록 조회 -->
    <select id="selectOrdersByGuestCode" resultType="com.hollybam.hollybam.dto.OrderDto">
        SELECT order_code as orderCode, order_id as orderId, guest_code as guestCode,
               orderer_name as ordererName, receiver_name as receiverName,
               total_amount as totalAmount, final_amount as finalAmount,
               order_status as orderStatus, payment_status as paymentStatus,
               create_at as createAt, update_at as updateAt
        FROM orders
        WHERE guest_code = #{guestCode}
        ORDER BY create_at DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 주문 상품 목록 조회 -->
    <select id="selectOrderItemsByOrderCode" resultType="com.hollybam.hollybam.dto.OrderItemDto">
        SELECT oi.order_item_code as orderItemCode, oi.order_code as orderCode,
               oi.product_code as productCode, oi.option_code as optionCode,
               oi.quantity, oi.unit_price as unitPrice, oi.option_price as optionPrice,
               oi.total_price as totalPrice, oi.create_at as createAt
        FROM order_items oi
        WHERE oi.order_code = #{orderCode}
        ORDER BY oi.order_item_code
    </select>

    <!-- 주문 상태 업데이트 -->
    <update id="updateOrderStatus">
        UPDATE orders
        SET order_status = #{orderStatus}, update_at = CURRENT_TIMESTAMP
        WHERE order_code = #{orderCode}
    </update>

    <!-- 결제 상태 업데이트 -->
<!--    <update id="updatePaymentStatus">-->
<!--        UPDATE orders-->
<!--        SET payment_status = #{paymentStatus}, pg_provider = #{pgProvider}, pg_tid = #{pgTid}, update_at = CURRENT_TIMESTAMP-->
<!--        WHERE order_code = #{orderCode}-->
<!--    </update>-->

    <!-- 회원 주문 개수 조회 -->
    <select id="countOrdersByMemberCode" resultType="int">
        SELECT COUNT(*) FROM orders WHERE mem_code = #{memCode}
    </select>

    <!-- 비회원 주문 개수 조회 -->
    <select id="countOrdersByGuestCode" resultType="int">
        SELECT COUNT(*) FROM orders WHERE guest_code = #{guestCode}
    </select>

    <!-- 상품 재고 차감 (옵션 없는 상품만) -->
    <update id="updateProductQuantity">
        UPDATE product
        SET product_quantity = product_quantity - #{quantity}, update_at = CURRENT_TIMESTAMP
        WHERE product_code = #{productCode}
          AND product_quantity >= #{quantity}
          AND NOT EXISTS (SELECT 1 FROM product_option WHERE product_code = #{productCode})
    </update>

    <!-- 옵션 재고 차감 -->
    <update id="updateOptionQuantity">
        UPDATE product_option
        SET option_quantity = option_quantity - #{quantity}, update_at = CURRENT_TIMESTAMP
        WHERE option_code = #{optionCode}
          AND option_quantity >= #{quantity}
    </update>

    <!-- 상품 재고 복원 (옵션 없는 상품만) -->
    <update id="restoreProductQuantity">
        UPDATE product
        SET product_quantity = product_quantity + #{quantity}, update_at = CURRENT_TIMESTAMP
        WHERE product_code = #{productCode}
          AND NOT EXISTS (SELECT 1 FROM product_option WHERE product_code = #{productCode})
    </update>

    <!-- 옵션 재고 복원 -->
    <update id="restoreOptionQuantity">
        UPDATE product_option
        SET option_quantity = option_quantity + #{quantity}, update_at = CURRENT_TIMESTAMP
        WHERE option_code = #{optionCode}
    </update>

    <!-- 옵션 재고 합계로 상품 전체 재고 업데이트 -->
    <update id="updateProductTotalQuantityFromOptions">
        UPDATE product
        SET product_quantity = (SELECT COALESCE(SUM(option_quantity), 0) FROM product_option WHERE product_code = #{productCode}),
            update_at = CURRENT_TIMESTAMP
        WHERE product_code = #{productCode}
    </update>

    <!-- 장바구니 아이템 삭제 -->
    <delete id="deleteCartItems">
        DELETE FROM cart
        WHERE cart_code IN
        <foreach collection="cartCodes" item="cartCode" open="(" separator="," close=")">
            #{cartCode}
        </foreach>
    </delete>

    <select id="getOrderDetails" resultType="java.util.HashMap">
        SELECT
            oi.order_code,
            p.product_name,
            po.option_value AS product_option,
            po.option_name,
            oi.quantity,
            (oi.unit_price + IFNULL(po.option_price, 0)) * oi.quantity AS total_price,
            i.image_url AS product_image
        FROM
            order_items oi
                JOIN
            product p ON oi.product_code = p.product_code
                LEFT JOIN
            product_option po ON oi.option_code = po.option_code
                LEFT JOIN
            image i ON p.product_code = i.product_code AND i.image_type = 'title'
        WHERE
            oi.order_code = #{orderCode}
    </select>

    <!-- Order 전체 조회 (회원 기준) -->
    <select id="selectOrdersByMember" parameterType="int" resultMap="orderResultMap">
        SELECT o.order_code, o.order_id, o.simple_status, o.create_at, o.final_amount,
               oi.order_item_code, oi.order_code AS oi_order_code, oi.product_code, oi.option_code,
               oi.quantity, oi.unit_price, oi.option_price, oi.total_price,
               p.product_name, p.product_code, p.product_order_count,
               po.option_name, po.option_value,
               pr.price_selling, i.image_url
        FROM orders o
                 LEFT JOIN order_items oi ON o.order_code = oi.order_code
                 LEFT JOIN product p ON oi.product_code = p.product_code
                 LEFT JOIN product_option po ON oi.option_code = po.option_code
                 LEFT JOIN price pr ON p.product_code = pr.product_code
                 LEFT JOIN image i ON p.product_code = i.product_code AND i.image_type = 'title'
        WHERE o.mem_code = #{memberCode}
            AND o.payment_status != 'FAILED'
        ORDER BY o.create_at desc
    </select>

    <!-- Order 전체 조회 (비회원 기준) -->
    <select id="selectOrdersByGuest" parameterType="int" resultMap="orderResultMap">
        SELECT
            o.order_code, o.order_id, o.simple_status, o.create_at, o.final_amount,

            oi.order_item_code, oi.order_code AS oi_order_code, oi.product_code, oi.option_code,
            oi.quantity, oi.unit_price, oi.option_price, oi.total_price,

            p.product_name, p.product_code, p.product_order_count,

            po.option_name, po.option_value,

            pr.price_selling,

            i.image_url

        FROM orders o
                 LEFT JOIN order_items oi ON o.order_code = oi.order_code
                 LEFT JOIN product p ON oi.product_code = p.product_code
                 LEFT JOIN product_option po ON oi.option_code = po.option_code
                 LEFT JOIN price pr ON p.product_code = pr.product_code
                 LEFT JOIN image i ON p.product_code = i.product_code AND i.image_type = 'title'

        WHERE o.guest_code = #{guestCode}
          AND o.payment_status != 'FAILED'
        ORDER BY o.create_at DESC
    </select>

    <!-- Order 최근 조회 (회원 기준) -->
    <select id="selectOrdersByMemberForLimit" parameterType="int" resultMap="orderResultMap">
        SELECT
            o.order_code, o.order_id, o.simple_status, o.create_at, o.final_amount,

            oi.order_item_code, oi.order_code AS oi_order_code, oi.product_code, oi.option_code,
            oi.quantity, oi.unit_price, oi.option_price, oi.total_price,

            p.product_name, p.product_code, p.product_order_count, p.product_quantity,

            po.option_name, po.option_value,

            pr.price_selling,

            i.image_url

        FROM (
                 SELECT order_code
                 FROM orders
                 WHERE mem_code = #{memberCode}
                   AND payment_status != 'FAILED'
                 ORDER BY create_at DESC
                 LIMIT 2
             ) AS recent_orders
                 JOIN orders o ON o.order_code = recent_orders.order_code
                 LEFT JOIN order_items oi ON o.order_code = oi.order_code
                 LEFT JOIN product p ON oi.product_code = p.product_code
                 LEFT JOIN product_option po ON oi.option_code = po.option_code
                 LEFT JOIN price pr ON p.product_code = pr.product_code
                 LEFT JOIN image i ON p.product_code = i.product_code AND i.image_type = 'title'

        ORDER BY o.create_at DESC
    </select>



    <!-- Order 최근 조회 (비회원 기준) -->
    <select id="selectOrdersByGuestForLimit" parameterType="int" resultMap="orderResultMap">
        SELECT
            o.order_code, o.order_id, o.simple_status, o.create_at, o.final_amount,

            oi.order_item_code, oi.order_code AS oi_order_code, oi.product_code, oi.option_code,
            oi.quantity, oi.unit_price, oi.option_price, oi.total_price,

            p.product_name, p.product_code, p.product_order_count, p.product_quantity,

            po.option_name, po.option_value,

            pr.price_selling,

            i.image_url

        FROM (
                 SELECT order_code
                 FROM orders
                 WHERE guest_code = #{guestCode}
                   AND payment_status != 'FAILED'
                 ORDER BY create_at DESC
                 LIMIT 2
             ) AS recent_orders
                 JOIN orders o ON o.order_code = recent_orders.order_code
                 LEFT JOIN order_items oi ON o.order_code = oi.order_code
                 LEFT JOIN product p ON oi.product_code = p.product_code
                 LEFT JOIN product_option po ON oi.option_code = po.option_code
                 LEFT JOIN price pr ON p.product_code = pr.product_code
                 LEFT JOIN image i ON p.product_code = i.product_code AND i.image_type = 'title'

        ORDER BY o.create_at DESC
    </select>




    <!-- resultMap -->
    <resultMap id="orderResultMap" type="com.hollybam.hollybam.dto.OrderDto">
        <id property="orderCode" column="order_code"/>
        <result property="orderId" column="order_id"/>
        <result property="orderStatus" column="order_status"/>
        <result property="orderStatus" column="simple_status"/>
        <result property="createAt" column="create_at"/>
        <result property="finalAmount" column="final_amount"/>

        <!-- orderItems -->
        <collection property="orderItems" javaType="java.util.ArrayList" ofType="com.hollybam.hollybam.dto.OrderItemDto">
            <id property="orderItemCode" column="order_item_code"/>
            <result property="orderCode" column="oi_order_code"/>
            <result property="productCode" column="product_code"/>
            <result property="optionCode" column="option_code"/>
            <result property="quantity" column="quantity"/>
            <result property="unitPrice" column="unit_price"/>
            <result property="optionPrice" column="option_price"/>
            <result property="totalPrice" column="total_price"/>

            <!-- productDto -->
            <association property="productDto" javaType="com.hollybam.hollybam.dto.ProductDto">
                <id property="productCode" column="product_code"/>
                <result property="productName" column="product_name"/>
                <result property="productOrderCount" column="product_order_count"/>
                <result property="productQuantity" column="product_quantity"/>

                <!-- 단일 가격 정보 -->
                <association property="priceDto" javaType="com.hollybam.hollybam.dto.PriceDto">
                    <result property="priceSelling" column="price_selling"/>
                </association>

                <!-- 단일 대표 이미지 -->
                <association property="imageDto" javaType="com.hollybam.hollybam.dto.ImageDto">
                    <result property="imageUrl" column="image_url"/>
                </association>
            </association>

            <!-- 단일 옵션 정보 -->
            <association property="productOptionDto" javaType="com.hollybam.hollybam.dto.ProductOptionDto">
                <result property="optionName" column="option_name"/>
                <result property="optionValue" column="option_value"/>
            </association>
        </collection>
    </resultMap>

    <select id="getFinalAmount" parameterType="int" resultType="int">
        select final_amount
        from orders
        where order_code = #{code}
    </select>

    <select id="getTrackingNumber" parameterType="int" resultType="com.hollybam.hollybam.dto.DeliveryDto">
        select tracking_number as trackingNumber
        from delivery
        where order_code = #{orderCode}
    </select>

    <select id="selectOrderItemDetail" parameterType="int" resultMap="orderItemResultMap">
        SELECT
            oi.order_item_code,
            oi.product_code,
            oi.option_code,
            oi.quantity,
            oi.unit_price,
            oi.option_price,
            oi.total_price,

            p.product_name,
            p.product_order_count,

            po.option_name,
            po.option_value,

            i.image_url,
            i.image_type,   -- 추가해야 함!

            pr.price_selling

        FROM order_items oi
                 LEFT JOIN product p ON oi.product_code = p.product_code
                 LEFT JOIN product_option po ON oi.option_code = po.option_code
                 LEFT JOIN price pr ON oi.product_code = pr.product_code
                 LEFT JOIN image i ON p.product_code = i.product_code AND i.image_type = 'title'

        WHERE oi.order_item_code = #{orderItemCode}
    </select>
    <resultMap id="orderItemResultMap" type="com.hollybam.hollybam.dto.OrderItemDto">
        <!-- OrderItemDto 필드 -->
        <id property="orderItemCode" column="order_item_code"/>
        <result property="productCode" column="product_code"/>
        <result property="optionCode" column="option_code"/>
        <result property="quantity" column="quantity"/>
        <result property="unitPrice" column="unit_price"/>
        <result property="optionPrice" column="option_price"/>
        <result property="totalPrice" column="total_price"/>

        <!-- ProductDto -->
        <association property="productDto" javaType="com.hollybam.hollybam.dto.ProductDto">
            <id property="productCode" column="product_code"/>
            <result property="productName" column="product_name"/>
            <result property="productOrderCount" column="product_order_count"/>

            <!-- ImageDto (대표 이미지) -->
            <association property="imageDto" javaType="com.hollybam.hollybam.dto.ImageDto">
                <result property="imageUrl" column="image_url"/>
                <result property="imageType" column="image_type"/>
            </association>
            <association property="priceDto" javaType="com.hollybam.hollybam.dto.PriceDto">
                <id property="priceCode" column="price_code"/>
                <result property="priceSelling" column="price_selling"/>
            </association>
        </association>

        <!-- ProductOptionDto -->
        <association property="productOptionDto" javaType="com.hollybam.hollybam.dto.ProductOptionDto">
            <id property="optionCode" column="option_code"/>
            <result property="optionName" column="option_name"/>
            <result property="optionValue" column="option_value"/>
        </association>
    </resultMap>

    <select id="getProductName" parameterType="int" resultType="String">
        select product_name
        from product
        where product_code=#{productCode}
    </select>

    <update id="updatePaymentStatus" parameterType="String">
        update hollybam.orders
        set hollybam.orders.payment_status = #{status}, simple_status = #{status}
        where hollybam.orders.order_id = #{orderId}
    </update>

    <select id="getCartProductName" resultType="map" parameterType="int">
        SELECT
            (
                SELECT p.product_name
                FROM order_items oi
                         JOIN product p
                              ON p.product_code = oi.product_code
                WHERE oi.order_code = #{orderCode}
                ORDER BY oi.order_item_code
                LIMIT 1
            ) AS firstProductName,
            (
                SELECT COUNT(*)
                FROM order_items
                WHERE order_code = 130
            ) AS itemCount;
    </select>

    <!-- 🗑️ 주문 아이템 삭제 (즉시 삭제용) -->
    <delete id="deleteOrderItems">
        DELETE FROM order_items
        WHERE order_code = #{orderCode}
    </delete>

    <!-- 🗑️ 주문 삭제 (즉시 삭제용) -->
    <delete id="deleteOrder">
        DELETE FROM orders
        WHERE order_code = #{orderCode}
          AND order_status = 'PENDING'
          AND payment_status = 'PENDING'
    </delete>

    <!-- 🗑️ 즉시 주문 삭제 (조건 최소화) -->
    <delete id="deleteOrderInstant">
        DELETE FROM orders
        WHERE order_code = #{orderCode}
    </delete>

    <!-- 🚀 주문 코드만 빠르게 조회 (삭제용) -->
    <select id="getOrderCodeByIdForDelete" resultType="java.lang.Integer">
        SELECT order_code
        FROM orders
        WHERE order_id = #{orderId}
        AND order_status = 'PENDING'
        AND payment_status = 'PENDING'
        AND TIMESTAMPDIFF(MINUTE, create_at, NOW()) &lt;= 30
        LIMIT 1
    </select>

    <!-- 🚀 재고 복원용 주문 아이템 빠른 조회 -->
    <select id="getOrderItemsForRestore" resultType="java.util.HashMap">
        SELECT
            oi.product_code as productCode,
            oi.quantity,
            oi.option_code as optionCode
        FROM order_items oi
        WHERE oi.order_code = #{orderCode}
    </select>

    <!-- 🔄 빠른 옵션 재고 복원 -->
    <update id="restoreOptionQuantityFast">
        UPDATE product_option
        SET option_quantity = option_quantity + #{quantity}
        WHERE option_code = #{optionCode}
    </update>

    <!-- 🔄 빠른 상품 재고 복원 -->
    <update id="restoreProductQuantityFast">
        UPDATE product
        SET product_quantity = product_quantity + #{quantity}
        WHERE product_code = #{productCode}
    </update>

    <select id="getOrderCodeNumber" parameterType="String" resultType="int">
        SELECT COUNT(*)
        FROM orders
        WHERE order_id LIKE CONCAT(#{date}, '\_%')
    </select>

    <select id="getOrderItemsList" resultType="map">
        SELECT
            p.product_id                                 AS productId,     -- 상품 ID (varchar)
            p.product_code                               AS productCode,   -- 상품 코드 (int)
            p.product_name                               AS productName,
            po.option_name                               AS optionName,
            po.option_value                              AS optionValue,
            oi.quantity                                  AS quantity,
            (oi.unit_price + IFNULL(oi.option_price,0))  AS price,         -- 옵션가 포함 단가
            oi.total_price                               AS totalPrice,
            img.image_url                                AS imageUrl
        FROM order_items oi
                 JOIN product p
                      ON p.product_code = oi.product_code
                 LEFT JOIN product_option po
                           ON po.option_code = oi.option_code
                 LEFT JOIN (
            /* 상품별 대표 이미지 1장: main 우선, 없으면 image_order 낮은 것 */
            SELECT product_code, image_url
            FROM (
                     SELECT
                         i.product_code,
                         i.image_url,
                         ROW_NUMBER() OVER (
                             PARTITION BY i.product_code
                             ORDER BY (i.image_type = 'title') DESC, i.image_order ASC, i.image_code ASC
                             ) AS rn
                     FROM image i
                 ) x
            WHERE x.rn = 1
        ) img
                           ON img.product_code = oi.product_code
        WHERE oi.order_code = #{orderCode}
        ORDER BY oi.order_item_code
    </select>

    <!-- 주문 금액/회원여부 -->
    <select id="getOrderAmounts" parameterType="int" resultType="map">
        SELECT total_amount AS itemsSubtotal,
               delivery_fee AS deliveryFee,
               final_amount  AS finalAmount,
               mem_code      AS memCode,
               guest_code    AS guestCode
        FROM hollybam.orders
        WHERE order_code = #{orderCode}
    </select>

    <!-- 환불 배치 -->
    <insert id="insertRefundBatch" parameterType="map"
            useGeneratedKeys="true" keyProperty="refundBatchId" keyColumn="refund_batch_id">
        INSERT INTO refund_batches
        (order_code, refund_amount, refund_delivery_fee, refund_reason, refund_type)
        VALUES
            (#{orderCode}, #{refundAmount}, #{refundDeliveryFee}, #{cancelReason}, #{actionType})
    </insert>

    <update id="updateRefundBatchTotals" parameterType="map">
        UPDATE refund_batches
        SET refund_amount = #{refundAmount},
            refund_delivery_fee = #{refundDeliveryFee}
        WHERE refund_batch_id = #{refundBatchId}
    </update>

    <!-- 환불 아이템 -->
    <insert id="insertRefundItem" parameterType="map">
        INSERT INTO refund_items(refund_batch_id, order_item_code, refund_quantity, refund_amount)
        VALUES(#{refundBatchId}, #{orderItemsCode}, #{refundQuantity}, #{refundAmount})
    </insert>

    <!-- 제품/주문아이템 -->
    <select id="getProductCodeByProductId" parameterType="string" resultType="int">
        SELECT product_code FROM hollybam.product WHERE product_id = #{productId}
    </select>

    <select id="getOrderItemsCodeByProductCode" parameterType="map" resultType="int">
        SELECT order_item_code
        FROM hollybam.order_items
        WHERE order_code = #{orderCode} AND product_code = #{productCode}
    </select>

    <select id="getOrderItemPrice" parameterType="int" resultType="map">
        SELECT unit_price AS unitPrice,
               COALESCE(option_price,0) AS optionPrice,
               quantity
        FROM hollybam.order_items
        WHERE order_item_code = #{orderItemCode}
        LIMIT 1
    </select>

    <select id="countOrderItems" parameterType="int" resultType="int">
        SELECT COUNT(*) FROM hollybam.order_items WHERE order_code = #{orderCode}
    </select>

    <!-- 쿠폰 -->
    <select id="isCouponUsedOrder" parameterType="int" resultType="int">
        SELECT COUNT(*) FROM hollybam.coupon_member WHERE order_code = #{orderCode}
    </select>

    <select id="getCouponMemberCode" parameterType="int" resultType="int">
        SELECT coupon_member_code
        FROM hollybam.coupon_member
        WHERE order_code = #{orderCode}
    </select>

    <update id="updateCouponMemberByRefund" parameterType="map">
        UPDATE hollybam.coupon_member
        SET used = 0,
            used_at = NULL,
            order_code = NULL,
            discount_amount = NULL
        WHERE coupon_member_code = #{couponMemberCode}
    </update>

    <select id="getUseCouponInfoByRefund" parameterType="int"
            resultType="com.hollybam.hollybam.dto.CouponDto">
        SELECT c.discount_type   AS discountType,
               c.discount_value  AS discountValue,
               c.max_discount    AS maxDiscount,
               c.min_order_price AS minOrderPrice
        FROM hollybam.coupon_member cm
                 JOIN hollybam.coupon c ON c.coupon_code = cm.coupon_code
        WHERE cm.order_code = #{orderCode}
        LIMIT 1
    </select>

    <update id="updateCouponMemberDiscountAmount" parameterType="map">
        UPDATE hollybam.coupon_member
        SET discount_amount = #{discountAmount}
        WHERE order_code = #{orderCode}
    </update>

    <!-- 할인코드 -->
    <select id="isDiscountCodeUsedOrder" parameterType="int" resultType="int">
        SELECT COUNT(*) FROM hollybam.discount_code_usage WHERE order_code = #{orderCode}
    </select>

    <select id="getUseDiscountInfoByRefund" parameterType="int"
            resultType="com.hollybam.hollybam.dto.DiscountDto">
        SELECT d.discount_type   AS discountType,
               d.discount_value  AS discountValue,
               COALESCE(d.min_order_price, 0) AS minOrderPrice
        FROM hollybam.discount_code_usage u
                 JOIN hollybam.discount d ON d.discount_code = u.discount_code
        WHERE u.order_code = #{orderCode}
        LIMIT 1
    </select>

    <delete id="delDiscountCodeUsageByRefund" parameterType="int">
        DELETE FROM hollybam.discount_code_usage WHERE order_code = #{orderCode}
    </delete>

    <update id="updateDiscountCodeUsageAmount" parameterType="map">
        UPDATE hollybam.discount_code_usage
        SET discount_amount = #{discountAmount}
        WHERE order_code = #{orderCode}
    </update>

    <!-- 포인트 -->
    <select id="isOrderPoint" parameterType="int" resultType="int">
        SELECT COUNT(*) FROM hollybam.point WHERE related_order_code = #{orderCode}
    </select>

    <select id="getPointInfo" parameterType="int" resultType="map">
        SELECT point_change AS pointChange,
               point_type   AS pointType,
               point_code   AS pointCode
        FROM hollybam.point
        WHERE related_order_code = #{orderCode}
    </select>

    <delete id="deletePointsByCodes" parameterType="list">
        DELETE FROM hollybam.point
        <where>
            <if test="list != null and list.size() > 0">
                point_code IN
                <foreach collection="list" item="p" open="(" separator="," close=")">
                    #{p.pointCode}
                </foreach>
            </if>
            <if test="list == null or list.size() == 0">
                AND 1=0
            </if>
        </where>
    </delete>

    <insert id="insertPoint" parameterType="com.hollybam.hollybam.dto.PointDto">
        INSERT INTO hollybam.point
            (mem_code, point_change, point_type, description, related_order_code)
        VALUES
            (#{memberCode}, #{pointChange}, #{pointType}, #{description}, #{relatedOrderCode})
    </insert>

    <select id="selectOrderAmounts" parameterType="int" resultType="map">
        SELECT
            total_amount  AS P0,
            delivery_fee  AS S0,
            final_amount  AS F0
        FROM hollybam.orders
        WHERE order_code = #{orderCode}
    </select>

    <!-- 주문 내 특정 product_id 라인 조회 -->
    <select id="getOrderItemByProductId" parameterType="map" resultType="map">
        SELECT
            oi.order_item_code AS orderItemCode,
            oi.quantity        AS quantity,
            oi.unit_price      AS unitPrice,
            oi.option_price    AS optionPrice
        FROM hollybam.order_items oi
                 JOIN hollybam.product     p  ON p.product_code = oi.product_code
        WHERE oi.order_code = #{orderCode}
          AND p.product_id  = #{productId}
        LIMIT 1
    </select>

    <!-- 누적 환불 수량(과다 환불 방지) -->
    <select id="getRefundedQtyForOrderItem" parameterType="int" resultType="int">
        SELECT COALESCE(SUM(refund_quantity), 0)
        FROM hollybam.refund_items
        WHERE order_item_code = #{orderItemCode}
    </select>

    <!-- 주문의 환불용 상품 목록: 라인별 환불가능수량(refundableQuantity) 포함 -->
    <select id="getOrderItemsForRefund" parameterType="int" resultType="map">
        SELECT
            oi.order_item_code                                         AS orderItemCode,
            p.product_id                                               AS productId,
            p.product_name                                             AS productName,
            oi.quantity                                                AS orderedQuantity,
            COALESCE(oi.unit_price + oi.option_price, oi.unit_price)   AS price,
            COALESCE(r.refunded_qty, 0)                                AS refundedQuantity,
            (oi.quantity - COALESCE(r.refunded_qty, 0))                AS refundableQuantity,
            po.option_name                                             AS optionName,
            po.option_value                                            AS optionValue,
            i.image_url                                                AS imageUrl
        FROM order_items oi
                 JOIN product p ON p.product_code = oi.product_code
                 LEFT JOIN product_option po ON po.option_code = oi.option_code
                 LEFT JOIN (
            SELECT order_item_code, SUM(refund_quantity) AS refunded_qty
            FROM refund_items
            GROUP BY order_item_code
        ) r ON r.order_item_code = oi.order_item_code
                 LEFT JOIN image i ON i.product_code = p.product_code AND i.image_type='title'
        WHERE oi.order_code = #{orderCode}
    </select>

    <!-- 라인(주문상품) 단건 조회 -->
    <select id="getOrderItemByCode" parameterType="int" resultType="map">
        SELECT
            oi.order_item_code                                         AS orderItemCode,
            oi.order_code                                              AS orderCode,
            p.product_id                                               AS productId,
            p.product_name                                             AS productName,
            oi.quantity                                                AS orderedQuantity,
            COALESCE(oi.unit_price + oi.option_price, oi.unit_price)   AS unitPrice
        FROM order_items oi
                 JOIN product p ON p.product_code = oi.product_code
        WHERE oi.order_item_code = #{orderItemCode}
    </select>

    <!-- 라인별 기환불 수량 합 -->
    <select id="sumRefundedQty" parameterType="int" resultType="int">
        SELECT COALESCE(SUM(refund_quantity),0)
        FROM refund_items
        WHERE order_item_code = #{orderItemCode}
    </select>

    <!-- 주문 헤더(합계/상태) -->
    <select id="getOrderHeaderForRefund" parameterType="int" resultType="map">
        SELECT
            order_code            AS orderCode,
            total_amount          AS totalAmount,     -- 총 상품가(할인 전)
            discount_amount       AS discountAmount,  -- 총 할인
            delivery_fee          AS deliveryFee,     -- 배송비
            final_amount          AS finalAmount,     -- 실제 결제액
            order_status          AS orderStatus
        FROM orders
        WHERE order_code = #{orderCode}
    </select>

    <update id="updateOrderStatusForRefund" parameterType="map">
        UPDATE orders
        SET order_status = #{orderStatus},
            payment_status = #{paymentStatus},
            simple_status = #{simpleStatus},
            update_at = CURRENT_TIMESTAMP
        WHERE order_code = #{orderCode}
    </update>

    <!-- 환불 신청 중복 체크 -->
    <select id="countRefundBatchesByOrder" parameterType="int" resultType="int">
        SELECT COUNT(*)
        FROM refund_batches
        WHERE order_code = #{orderCode}
    </select>

    <select id="isBuyCoupon" resultType="int">
        select count(*)
        from coupon
        where coupon_code = 2
    </select>

    <insert id="insBuyCoupon" parameterType="map">
        INSERT INTO coupon_member (mem_code, coupon_code, used, issued_at)
        VALUES (#{memberCode}, #{couponCode}, 0, now())
    </insert>
</mapper>