<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.hollybam.hollybam.dao.IF_CouponDao">

    <insert id="insertCoupon" parameterType="com.hollybam.hollybam.dto.CouponDto" useGeneratedKeys="true" keyProperty="couponCode">
        INSERT INTO coupon (
            coupon_id,
            coupon_name,
            coupon_discription,
            discount_type,
            discount_value,
            min_order_price,
            max_discount,
            issued_at,
            expired_at,
            is_auto_issue
        ) VALUES (
                     #{couponId},
                     #{couponName},
                     #{couponDiscription},
                     #{discountType},
                     #{discountValue},
                     #{minOrderPrice},
                     #{maxDiscount},
                     #{issuedAt},
                     #{expiredAt},
                     #{isAutoIssue}
                 )
    </insert>

    <select id="getUsePossibleCoupon" parameterType="int" resultType="com.hollybam.hollybam.dto.CouponDto">
        SELECT
            c.coupon_code as couponCode,
            c.coupon_id as couponId,
            c.discount_type as discountType,
            c.discount_value as discountValue,
            c.min_order_price as minOrderPrice,
            c.coupon_name as couponName
        FROM
            coupon_member cm
                JOIN
            coupon c ON cm.coupon_code = c.coupon_code
        WHERE
            cm.mem_code = #{memberCode}
          AND cm.used = 0
          AND (c.expired_at IS NULL OR c.expired_at >= CURDATE())
    </select>
    
    <select id="selectCouponCount" parameterType="int" resultType="int">
        SELECT COUNT(*) AS available_coupon_count
        FROM coupon_member cm
                 JOIN coupon c ON cm.coupon_code = c.coupon_code
        WHERE cm.used = 0
          AND cm.mem_code = #{memberCode}
          AND (c.expired_at IS NULL OR c.expired_at >= CURDATE());
    </select>
    
    <select id="selectTotalCouponCount" parameterType="int" resultType="int">
        select count(*)
        from coupon_member
        where mem_code=#{memberCode}
    </select>
    
    <select id="selectUsedCouponCount" parameterType="int" resultType="int">
        select count(*)
        from coupon_member
        where mem_code=#{memberCode} and used=1
    </select>

    <select id="expirationCouponCount" parameterType="int" resultType="int">
        SELECT COUNT(*) AS expired_coupon_count
        FROM coupon_member cm
                 JOIN coupon c ON cm.coupon_code = c.coupon_code
        WHERE cm.used = 0
          AND cm.mem_code = #{memberCode}
          AND c.expired_at IS NOT NULL
          AND c.expired_at &lt; CURDATE()
    </select>

    <!-- 회원의 쿠폰 목록 조회 (상태별) -->
    <select id="selectMemberCouponList" resultType="map">
        SELECT
        cm.coupon_member_code,
        cm.coupon_code,
        cm.mem_code,
        cm.issued_at as member_issued_at,
        cm.used,
        cm.used_at,
        cm.order_code,
        c.coupon_id,
        c.coupon_name,
        c.coupon_discription,
        c.discount_type,
        c.discount_value,
        c.min_order_price,
        c.max_discount,
        c.issued_at as coupon_issued_at,
        c.expired_at,
        c.is_auto_issue,
        c.created_at,
        CASE
        WHEN cm.used = 1 THEN 'used'
        WHEN c.expired_at <![CDATA[<]]> CURDATE() THEN 'expired'
        ELSE 'available'
        END as coupon_status
        FROM coupon_member cm
        JOIN coupon c ON cm.coupon_code = c.coupon_code
        WHERE cm.mem_code = #{memCode}
        <choose>
            <when test="status == 'available'">
                AND cm.used = 0 AND c.expired_at <![CDATA[>=]]> CURDATE()
            </when>
            <when test="status == 'used'">
                AND cm.used = 1
            </when>
            <when test="status == 'expired'">
                AND cm.used = 0 AND c.expired_at <![CDATA[<]]> CURDATE()
            </when>
            <!-- status == 'all'인 경우 조건 없음 -->
        </choose>
        ORDER BY
        CASE
        WHEN cm.used = 0 AND c.expired_at <![CDATA[>=]]> CURDATE() THEN 1
        WHEN cm.used = 1 THEN 2
        ELSE 3
        END,
        c.expired_at ASC,
        cm.issued_at DESC
    </select>

    <!-- 쿠폰 사용 처리 -->
    <update id="useCoupon">
        UPDATE coupon_member
        SET used = 1,
            used_at = NOW(),
            order_code = #{orderCode},
            discount_amount = #{discountAmount}
        WHERE coupon_member_code = #{couponMemberCode}
          AND used = 0
    </update>

    <select id="getCouponMemberCode" resultType="int">
        select coupon_member_code
        from coupon_member
        where mem_code = #{memberCode} and coupon_code = #{couponCode}
    </select>

    <!-- 쿠폰 ID로 쿠폰 정보 조회 -->
    <select id="findCouponByCouponId" parameterType="String" resultType="com.hollybam.hollybam.dto.CouponDto">
        SELECT
            coupon_code as couponCode,
            coupon_id as couponId,
            coupon_name as couponName,
            coupon_discription as couponDescription,
            discount_type as discountType,
            discount_value as discountValue,
            min_order_price as minOrderPrice
        FROM coupon
        WHERE coupon_id = #{couponId}
    </select>

    <!-- 회원이 해당 쿠폰을 이미 가지고 있는지 확인 -->
    <select id="checkMemberHasCoupon" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM coupon_member
        WHERE mem_code = #{memberCode}
          AND coupon_code = #{couponCode}
    </select>

    <!-- 회원에게 쿠폰 발급 -->
    <insert id="giveCouponToMember" parameterType="map">
        INSERT INTO coupon_member (mem_code, coupon_code, used, issued_at)
        VALUES (#{memberCode}, #{couponCode}, 0, now())
    </insert>
</mapper>
